{"version":3,"sources":["services/authService.js","context/AppReducer.js","context/AuthProvider.js","components/layout/Navbar.js","components/layout/Landing.js","components/auth/Login.js","components/auth/Register.js","components/admin/Admin.js","components/layout/ProfileBar.js","components/assessment/Assessment.js","components/AddContent/AddContent.js","services/publicService.js","components/contactus/ContactUs.js","components/trainingvideos/trainingData.js","components/trainingvideos/TrainingVideos.js","components/trainingvideoview/TrainingVideoView.js","components/auth/ForgotPassword.js","components/auth/ResetPassword.js","components/card/Card.js","components/user-dashboard/UserDashMain.js","components/user-dashboard/Userdashboard.js","components/PageNotFound404.js","components/auth/HomeTestpage.js","components/auth/PrivateScreen.js","components/routing/PrivateRoute.js","components/voiceover/VoiceOver.js","components/text/Text.js","components/video/Video.js","components/slides/Slides.js","components/presentor/Presentor.js","components/finishedmodule/FinishedModule.js","components/myprofile/MyProfile.js","components/usercard/Usercard.js","components/adminusers/AdminUsers.js","App.js","index.js"],"names":["authenticateUser","a","axios","get","authServerResponse","console","log","data","error","loginUser","email","password","post","loginServerResponse","response","logoutUser","logoutServerResponse","userState","action","type","firstName","payload","firstname","lastName","lastname","role","loggedIn","lastLesson","module","lessonId","modulesCompleted","index","currentModule","updatedModulesCompletedLessonIds","lessonIds","push","currentStepPosition","JSON","stringify","modIndex","updatedModulesCompletedFinished","moduleFinish","finished","newModulesCompleted","initialState","AuthContext","createContext","useAuth","useContext","AuthProvider","children","useState","isAuth","setIsAuth","useReducer","AppReducer","dispatch","useEffect","getExistingSession","authServiceResponse","setExistingUser","first","localStorage","getItem","last","r","setUserData","locStorLastLesson","parsedJSONobj","parse","setLastLesson","locStorModCompleted","parsedLocStorModCompleted","setModulesCompleted","setNoExistingUser","loginStatus","setItem","removeItem","jsonObj","stringObj","modulesarray","logIn","loginAuthServiceResponse","logOff","logoffAuthServiceResponse","success","Provider","value","status","addLessonIdToModuleCompleted","setModuleFinished","addNextModule","Navbar","name","to","links","setLinks","title","setTitle","location","useLocation","determineLinks","pathname","prev","className","style","float","fontWeight","fontSize","opacity","color","marginRight","map","btn","Landing","visible","setVisible","register","backgroundColor","font","borderRadius","padding","textDecoration","state","imgList","backgroundImage","backgroundRepeat","backgroundSize","height","width","textAlign","marginBottom","display","gridTemplateColumns","justifyContent","userSelect","gridColumn","gridRow","overflow","justifySelf","alignSelf","viewBox","d","fill","stroke","strokeWidth","transform","strokeLinejoin","onClick","src","LoginScreen","setEmail","setPassword","errorMessage","setErrorMessage","isProcessing","setIsProcessing","history","useHistory","loginHandler","Event","preventDefault","authProviderResponse","setTimeout","onSubmit","htmlFor","required","id","placeholder","onChange","target","minLength","disabled","RegisterScreen","registeredMessage","setRegisteredMessage","username","setUsername","confirmpassword","setConfirmPassword","accountType","setAccountType","licensetotal","setLicenseTotal","billingAmount","setBillingAmount","setFirstName","middleName","setMiddleName","setLastName","address","setAddress","city","setCity","states","setStates","zipcode","setZipcode","month","setMonth","day","setDay","year","setYear","gender","setGender","phone","setPhone","licenseIdNumber","setlicenseIdNumber","registeredOrgName","setRegisteredOrgName","usingCreditCard","setUsingCreditCard","orgName","setOrgName","orgAddress","setOrgAddress","orgCity","setOrgCity","orgStates","setOrgStates","orgZipcode","setOrgZipcode","orgPhone","setOrgPhone","isVisible","setVisiblity","isSinglePerson","setIsSinglePerson","setRole","showLicenseCode","setShowLicenseCode","showCreditCard","setShowCreditCard","reviewFormRef","login","useRef","stripe","useStripe","elements","useElements","startyear","Date","getFullYear","years","Array","from","val","current","scrollIntoView","behavior","block","inline","registerHandler","userDetails","header","createPaymentMethod","card","getElement","CardElement","billing_details","country","line1","paymentMethod","serverData","message","paymentButton","margin","border","selected","hidden","selectGenderHandler","selectAccountHandler","setLicenseTotalandCalculateBill","selectRoleHandler","ref","options","base","invalid","complete","Button","bgColour","setBgColour","buttonStyle","outline","textTransform","cursor","boxShadow","transition","onMouseEnter","onMouseLeave","Training","props","number","Admin","ProfileBar","showMenu","setShowMenu","document","addEventListener","avatarClick","event","logoutHandler","marginLeft","background","showRegisterAndLogin","flexDirection","borderBottom","Assessment","userAnswered","setUserAnswered","showExplanation","setShowExplanation","correct","setCorrect","incorrect","setIncorrect","finishedQuizzes","setFinishedQuizzes","disableButton","setDisabledButton","quizCount","setQuizCount","quizCountRef","courseContent","lessonType","quizs","question","choices","cid","values","choice","answer","setInterval","explanation","quizNum","nextLesson","previousLesson","AddContent","EnterATitle","formData","setFormData","e","class","defaultValue","maxLength","cols","rows","position","top","right","sendContactUsEmail","subject","config","serverResponse","ContactUs","setSubject","setMessage","successMessage","setSuccessMessage","contactUsHandler","stye","videoData","instructor","overview","price","group_limit","video_src","thumbnail_src","instructor_avatar","TrainingVideos","TrainingVideoView","trainingVideo","setTrainingVideo","trainingVideoId","match","params","tv","find","v","ForgotPasswordScreen","forgotPasswordHandler","ResetPasswordScreen","setComfirmPassword","setSuccess","disableEnableInput","setDisableEnableInput","resetPasswordHandler","put","resetToken","Card","description","startModule","setStartModule","completedModule","setCompletedModule","inprogressModule","setInprogressModule","nextModule","setNextModule","progressPercent","setProgressPercent","checkModuleUserStatus","forEach","userModCompleted","Math","round","length","max","UserDashMain","courseModules","setCourseModules","getCourse","course","mod","moduleId","Userdashboard","PageNotFound","HomeTestpage","showPrivateDashboard","setShowPrivateDashboardLink","PrivateScreen","errorMessage2","setErrorMessage2","serverError","setServerError","privateData","setPrivateData","headers","PrivateRoute","Component","component","path","render","VoiceOver","loadImages","loadBackgroundImage","loadAudios","images","audios","lessontitle","image","url","audio","playing","controls","onEnded","lessonText","subtext1","subtext2","subtext3","subtext4","Text","Video","loadVideos","videos","video","Slides","loadSlides","slides","Presentor","start","setStart","showButton","setShowButton","setCourseContent","setIsCompletedModule","setInProgressModule","voiceOverComponent","setVoiceOverComponent","textComponent","setTextComponent","videoComponent","setVideoComponent","slidesComponent","setSlidesComponent","assessmentComponent","setAssessmentComponent","setPresentor","stepPosition","setStepPosition","setCurrentModule","contentType","setContentType","lessonStepRef","lastModuleLessonTypeRef","getModules","cardModule","cardLessionId","serverDataModules","courseModule","nextStepPosition","patch","userUpdateProgressResponse","previousStepPosition","FinishedModule","MyProfile","setLicenseIdNumber","newPassword","setNewPassword","userInfo","setUserInfo","isSuccess","setIsSuccess","successPersonalChange","setSuccessPersonalChange","successAccountChange","setSuccessAccountChange","failPersonalChange","setFailPersonalChange","failAccountChange","setFailAccountChange","isError","setIsError","getUserData","userData","user","changePersonalInfoHandler","userPersonalInfoChanged","userChangedResponse","changeAccountInfoHandler","userAccountInfoChanged","userAccountChangedResponse","colSpan","readOnly","userModulesCompleted","userModsCompletedTotalRef","userLessonsTakenRef","totalModuleLessonsRef","valueRef","userModule","moduleNumber","dividend","divisor","valueModulePercent","AdminUsers","organizationUsers","setOrganizationUsers","organizationPaid","setOrganizationPaid","licenseTotal","licenseUsers","setLicenseUsers","getOrganizationUsers","organization","organizationName","licenseUsed","_id","stripePromise","loadStripe","App","exact","Login","ForgotPassword","ResetPassword","redirLink","Register","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.91a42c10.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n\r\n\r\n\r\n/**This component has functions that are used for authentication and authorization. It is used in the \r\n * AuthProvider.js and Register.js \r\n */\r\n\r\n\r\n//Check it the user has an existing express-session on the server. If so sow they are logged in and pass it \r\n//to the AuthProvider ELSE they are not logged in.\r\nexport const authenticateUser = async () => {\r\n    try{\r\n\r\n        const authServerResponse = await axios.get('/api/auth/session');\r\n        console.log('authService authRes:', authServerResponse);\r\n\r\n        if ( !authServerResponse.data.error ){\r\n            console.log(\"No authServerResponse.data.error, found a session\");\r\n            return authServerResponse;\r\n            \r\n\r\n        }else{\r\n            console.log('No existing user session in database!');\r\n            return authServerResponse;\r\n            \r\n        }\r\n\r\n    }catch(error){\r\n\r\n        console.log('authService authenticate error:', error)\r\n        return error;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//Used in the AuthProvider to login users from the login page\r\nexport const loginUser = async ({email, password}) => {\r\n    \r\n    let loginServerResponse;\r\n\r\n    try {\r\n\r\n        console.log(\"authService loginUser try\");\r\n         loginServerResponse = await axios.post(\"/api/auth/login\", {email, password});\r\n        console.log('authService loginRes:', loginServerResponse);\r\n\r\n        return loginServerResponse; \r\n\r\n    } catch (error) {\r\n\r\n        console.log(\"authService loginServerResponse Error: \" + error.response.data.error);\r\n        console.log('There is no user with these credentials!');\r\n\r\n        return error;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//used in the AuthProvider to logout users\r\nexport const logoutUser = async () => {\r\n\r\n    let logoutServerResponse;\r\n\r\n    try {\r\n         logoutServerResponse = await axios.post('/api/auth/session/logout');\r\n        console.log('authService logoutServerResponse:', logoutServerResponse);\r\n        return logoutServerResponse;\r\n\r\n    } catch (error) {\r\n        console.log(\"authService Error: \" + logoutServerResponse.data.error);\r\n        console.log('Could not logout because of error');\r\n        return logoutServerResponse;\r\n    }\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\n\r\n\r\nexport default (userState, action) => {\r\n\r\n    switch(action.type) {\r\n \r\n        case 'USER_DATA':\r\n            return {\r\n                ...userState,\r\n                //changing names, etc\r\n                firstName: action.payload.firstname,\r\n                lastName: action.payload.lastname,\r\n                role: action.payload.role\r\n            }\r\n\r\n        case 'LOGIN_STATUS':\r\n            return{\r\n                ...userState,\r\n                loggedIn: action.payload\r\n            }\r\n\r\n        case 'LAST_LESSON':\r\n            return {\r\n                ...userState,\r\n                //changing the last lesson\r\n                lastLesson: { module: action.payload.module, lessonId: action.payload.lessonId } \r\n            }\r\n\r\n        case 'MODULES_COMPLETED':\r\n            return {\r\n                ...userState,\r\n                //adding the modules completed\r\n                modulesCompleted: action.payload\r\n            }\r\n\r\n        case 'ADD_LESSON_ID': {\r\n            let index = action.payload.currentModule;\r\n            //zero based array\r\n            index--;\r\n            //making a new array\r\n            const updatedModulesCompletedLessonIds = [...userState.modulesCompleted];\r\n            //find module\r\n            updatedModulesCompletedLessonIds[index].lessonIds.push(action.payload.currentStepPosition);\r\n            console.log(\"2 ADD_LESSON_ID****** updatedModulesCompletedLessons: \" + JSON.stringify(updatedModulesCompletedLessonIds));\r\n            return { \r\n                ...userState,\r\n                modulesCompleted: updatedModulesCompletedLessonIds,\r\n            }\r\n        }\r\n\r\n        case 'MODULE_FINISHED':{\r\n            let modIndex = action.payload.currentModule;\r\n            //zero index based array\r\n            modIndex--;\r\n            //making a new array\r\n            const updatedModulesCompletedFinished = [...userState.modulesCompleted];\r\n            //find module based on index and change the moduleFinish key-value pair\r\n            updatedModulesCompletedFinished[modIndex].moduleFinish = action.payload.finished;\r\n            console.log(\"2)updatedModulesCompletedFinished: \" + JSON.stringify(updatedModulesCompletedFinished));\r\n            return { \r\n                ...userState,\r\n                modulesCompleted: updatedModulesCompletedFinished\r\n            }\r\n        }\r\n\r\n        case 'ADD_NEW_MODULE':{\r\n            //making a new array and adding the newModule to the end\r\n            const newModulesCompleted = [...userState.modulesCompleted, \r\n                {   module: action.payload.module,\r\n                    lessonIds: action.payload.lessonIds,\r\n                    moduleFinish: action.payload.moduleFinish }];\r\n\r\n            console.log(\"5) newModulesCompleted: \" + JSON.stringify(newModulesCompleted));\r\n            return {\r\n                ...userState,\r\n                //reassigning the modulesCompleted with the new one\r\n                modulesCompleted: newModulesCompleted\r\n            }\r\n\r\n        }\r\n\r\n\r\n        case 'LOGIN_USER':\r\n            return {\r\n                ...userState,\r\n                loggedIn: true,\r\n                email: action.payload.email,\r\n                role: action.payload.role\r\n            }\r\n\r\n        case 'LOGOFF_USER':\r\n            return {\r\n                ...userState,\r\n                loggedIn: false,\r\n                email: \"\"\r\n            }\r\n\r\n\r\n        default:\r\n            return userState;\r\n    }\r\n\r\n}","import { createContext, useContext, useReducer, useEffect, useState } from 'react';\r\nimport { loginUser, logoutUser, authenticateUser } from '../services/authService';\r\nimport AppReducer from '../context/AppReducer';\r\n//import axios from 'axios'; server request are done through authService\r\n\r\n\r\n\r\n\r\n/**This component is used to hold the Global Context State variables. It wraps all the web application\r\n * components inside the App.js and routes. It authenticates the user using the authService component.\r\n * From here it sets the state variables using the AppReducer\r\n * \r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n//initial State\r\nconst initialState = {\r\n    email: \"\",\r\n    role: \"\",\r\n    loggedIn: false,\r\n\r\n    firstName: \"None\",\r\n    lastName: \"None\",\r\n    role: \"None\",\r\n    lastLesson: {module: 0, lessonId: 0},\r\n    modulesCompleted: [{ module: 0, lessonIds: [0], moduleFinish: false }]\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//create context and export function\r\nconst AuthContext = createContext(initialState);\r\n\r\n\r\n//function that gives access to context\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//AuthProvider to provide Global Provider Context for the application to check is the user is logged in a session\r\nexport const AuthProvider = ({ children }) =>{\r\n\r\n    const [isAuth, setIsAuth] = useState(false);\r\n\r\n    const [userState, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n\r\n\r\n\r\n    useEffect(() =>{\r\n        //check if an existing session exist. Used when user refreshes that page because React loses all state\r\n        getExistingSession();\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //Check if there is an existing session on the server. If so then set all the users information from \r\n    //local storage\r\n    const getExistingSession = async () => {\r\n\r\n        try {\r\n            const authServiceResponse = await authenticateUser();\r\n            console.log(\"AuthProvider UseEffect authServiceResponse:\", authServiceResponse);\r\n\r\n            if(authServiceResponse.data.email){\r\n\r\n                setExistingUser(authServiceResponse.data.email, authServiceResponse.data.role);\r\n\r\n                const first = localStorage.getItem('firstName');\r\n                const last = localStorage.getItem('lastName');\r\n                const r = localStorage.getItem('role');\r\n\r\n                setUserData({firstname: first, lastname: last, role: r}, true);\r\n\r\n\r\n                const locStorLastLesson = localStorage.getItem('lastLesson');\r\n                //convert localStorage 'lastLesson' string to JSON object\r\n                const parsedJSONobj = JSON.parse(locStorLastLesson);\r\n                \r\n                setLastLesson(parsedJSONobj, true);\r\n\r\n\r\n                const locStorModCompleted = localStorage.getItem('modulesCompleted');\r\n                console.log(\"locStorModCompleted: \" + locStorModCompleted);\r\n                //convert localStorage 'modulesCompleted' string to JSON object\r\n                const parsedLocStorModCompleted = JSON.parse(locStorModCompleted);\r\n                console.log(\"parsedLocStorModCompled: \" + parsedLocStorModCompleted);\r\n\r\n                setModulesCompleted(parsedLocStorModCompleted, true);\r\n\r\n\r\n            }else{\r\n                console.log(\"AuthProvider getExistingSession: none exists\");\r\n                setNoExistingUser();\r\n                setUserData({firstname: \"\", lastname: \"\", role: \"\"}, false);\r\n                setLastLesson({}, false);\r\n                setModulesCompleted([], false);\r\n            }\r\n            \r\n\r\n        } catch (error) {\r\n            console.log(\"AuthProvider getExistingSession Error: \" + error);\r\n            setNoExistingUser();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //ACTIONS for the useReducer to change auth context global state===============\r\n    const setExistingUser = (email, role) => {\r\n        dispatch({\r\n            type: 'LOGIN_USER',\r\n            payload: {\r\n                email: email,\r\n                role: role\r\n            }\r\n        })\r\n    }\r\n\r\n    const setNoExistingUser = () => {\r\n        dispatch({\r\n            type: 'LOGOFF_USER'\r\n        });\r\n    }\r\n\r\n\r\n    \r\n    \r\n    //FUNCTIONs used in the application to change Global state variables==========================\r\n    const loginStatus = (status) => {\r\n        dispatch({\r\n            type: 'LOGIN_STATUS',\r\n            payload: status\r\n        });\r\n    }\r\n    \r\n\r\n\r\n\r\n    //Dispatch to save user data and store in local storage to prevent loss on browser reload\r\n    const setUserData = ({firstname, lastname, role}, loginStatus) => {\r\n        dispatch({\r\n            type: 'USER_DATA',\r\n            payload: {firstname, lastname, role}\r\n\r\n        });\r\n        //store state variables into localstorage to prevent loss on browser reload\r\n        if(loginStatus){\r\n            localStorage.setItem('firstName', firstname);\r\n            localStorage.setItem('lastName', lastname);\r\n            localStorage.setItem('role', role);\r\n\r\n        }else{\r\n            localStorage.removeItem('firstName');\r\n            localStorage.removeItem('lastName');\r\n            localStorage.removeItem('role');\r\n        }\r\n\r\n    }\r\n    \r\n    \r\n    //Dispatch to save last lesson data and store in local storage to prevent loss on browser reload\r\n    const setLastLesson = ({module, lessonId}, loginStatus) => {\r\n        console.log(\"AuthProvider setting module: \" + module + \", lastLessonId: \" + lessonId);\r\n        dispatch({\r\n            type: 'LAST_LESSON',\r\n            payload: { module, lessonId }\r\n        });\r\n\r\n        //save state variables into localstorage to prevent loss on browser reload\r\n        if(loginStatus){\r\n            //convert to JSON object to get ready for storage\r\n            const jsonObj = {module, lessonId};\r\n            //convert to string because only strings can be used in localStorage\r\n            const stringObj = JSON.stringify(jsonObj);\r\n\r\n            localStorage.setItem('lastLesson', stringObj);\r\n\r\n        }else{\r\n\r\n            localStorage.removeItem('lastLesson');\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //Dispatch to save modules completed data and store in local storage to prevent loss on browser reload\r\n    const setModulesCompleted = (modulesarray, loginStatus) => {\r\n        console.log(\"AuthProvider GlobalState modulesarray: +++++ \" + modulesarray);\r\n\r\n        dispatch({\r\n            type: 'MODULES_COMPLETED',\r\n            payload: modulesarray\r\n\r\n        });\r\n            //store state variables into localstorage to prevent loss on browser reload\r\n            if(loginStatus){\r\n            //convert to JSON object to get ready for storage\r\n            const jsonObj = modulesarray;\r\n            console.log(\"jsonObj: \" + jsonObj);\r\n            //convert to string because only strings can be used in localStorage\r\n            const stringObj = JSON.stringify(jsonObj);\r\n            console.log(\"stringObj: \" + stringObj)\r\n\r\n            localStorage.setItem('modulesCompleted', stringObj);\r\n        }else{\r\n            localStorage.removeItem('modulesCompleted');\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    //Dispatch to add a lessonId to the modulesCompleted array to add to the user progress\r\n    const addLessonIdToModuleCompleted = (currentModule, currentStepPosition) => {\r\n        console.log(\"1 AuthProvider GlobalState addLessonIdToModuleCompleted - currentModule: \" + currentModule + \" currentStepPosition: \" + currentStepPosition);\r\n\r\n        dispatch({\r\n            type: 'ADD_LESSON_ID',\r\n            payload: {currentModule, currentStepPosition}\r\n        });\r\n\r\n        console.log(\"3 modulesCompleted: \" + JSON.stringify(userState.modulesCompleted));\r\n\r\n        //store state variables into localstorage to prevent loss on browser reload\r\n        if(userState.loggedIn){\r\n            //convert to JSON object to get ready for storage\r\n            const jsonObj = userState.loggedIn;\r\n            console.log(\"jsonObj: \" + jsonObj);\r\n            //convert to string because only strings can be used in localStorage\r\n            const stringObj = JSON.stringify(jsonObj);\r\n            console.log(\"stringObj: \" + stringObj)\r\n\r\n            localStorage.setItem('modulesCompleted', stringObj);\r\n        }else{\r\n            localStorage.removeItem('modulesCompleted');\r\n        }\r\n\r\n    }\r\n\r\n    //Dispatch to set that the module has be finished by setting moduleFinish: true\r\n    const setModuleFinished = (currentModule, finished) => {\r\n        console.log(\"1)AuthProvider GlobalState setModuleFinished - currentModule: \" + currentModule + \" finished: \" + finished);\r\n\r\n        dispatch({\r\n            type: 'MODULE_FINISHED',\r\n            payload: {currentModule, finished}\r\n        });\r\n\r\n        console.log(\"3)moduleFinish modulesCompleted: \" + JSON.stringify(userState.modulesCompleted));\r\n\r\n        //store state variables into localstorage to prevent loss on browser reload\r\n        if(userState.loggedIn){\r\n            //convert to JSON object to get ready for storage\r\n            const jsonObj = userState.modulesCompleted;\r\n            console.log(\"jsonObj: \" + jsonObj);\r\n            //convert to string because only strings can be used in localStorage\r\n            const stringObj = JSON.stringify(jsonObj);\r\n            console.log(\"stringObj: \" + stringObj)\r\n\r\n            localStorage.setItem('modulesCompleted', stringObj);\r\n        }else{\r\n            localStorage.removeItem('modulesCompleted');\r\n        }\r\n\r\n    }\r\n\r\n    //Dispatch to add the next new module once one is completed to update user progress and let the next module be accessible\r\n    const addNextModule = ( { module, lessonIds, moduleFinish}) => {\r\n        console.log(\"4)AuthProvider GlobalState newModule: module: \" + module + \" lessondIds: \" + \" moduleFinish: \" + moduleFinish);\r\n\r\n        dispatch({\r\n            type: 'ADD_NEW_MODULE',\r\n            payload: { module, lessonIds, moduleFinish }\r\n        });\r\n\r\n        console.log(\"6)moduleFinish modulesCompleted: \" + JSON.stringify(userState.modulesCompleted));\r\n\r\n        //store state variabless new updated 'modulesCompleted into localstorage to prevent loss on browser reload\r\n        if(userState.loggedIn){\r\n            //convert to JSON object to get ready for storage\r\n            const jsonObj = userState.modulesCompleted;\r\n            console.log(\"jsonObj: \" + jsonObj);\r\n            //convert to string because only strings can be used in localStorage\r\n            const stringObj = JSON.stringify(jsonObj);\r\n            console.log(\"stringObj: \" + stringObj)\r\n\r\n            localStorage.setItem('modulesCompleted', stringObj);\r\n        }else{\r\n            localStorage.removeItem('modulesCompleted');\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //functions to pass to children and manage authorization global state\r\n    const logIn = async ({email, password}) => {\r\n        console.log(\"AuthProvider logIn\");\r\n        let loginAuthServiceResponse;\r\n\r\n        try {\r\n\r\n            loginAuthServiceResponse = await loginUser({email, password});\r\n\r\n            console.log(\"loginIn loginAuthServiceResponse: \" + loginAuthServiceResponse);\r\n\r\n\r\n            if(loginAuthServiceResponse.data.email){\r\n\r\n                //set auth context user to logged in\r\n                dispatch({\r\n                    type: 'LOGIN_USER',\r\n                    payload: {\r\n                        email: loginAuthServiceResponse.data.email,\r\n                        role: loginAuthServiceResponse.data.role\r\n                    }\r\n                });\r\n\r\n                return loginAuthServiceResponse;\r\n            }\r\n\r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n\r\n            console.log(\"AuthProvider credential loginIn problem - loginResponse Error: \" + error);\r\n            return error;\r\n            \r\n        }\r\n        \r\n\r\n      \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const logOff = async () => {\r\n\r\n        let logoffAuthServiceResponse;\r\n        \r\n        //set auth context user logged off\r\n        if(userState.loggedIn){\r\n\r\n            logoffAuthServiceResponse = await logoutUser();\r\n            console.log(\"AuthProvider logoffAuthServiceResponse: \" + logoffAuthServiceResponse);\r\n\r\n            dispatch({\r\n                type: 'LOGOFF_USER'\r\n            });\r\n\r\n            //remove persistent storage of user lesson information data\r\n            localStorage.removeItem('firstName');\r\n            localStorage.removeItem('lastName');\r\n            localStorage.removeItem('role');\r\n            localStorage.removeItem('lastLesson')\r\n            localStorage.removeItem('moduleCompletion')\r\n            localStorage.removeItem('moduleContent')\r\n\r\n            console.log(\"AuthProvider logoff logoffAuthServiceResponse.data.success: \" + logoffAuthServiceResponse.data.success);\r\n\r\n        }else{\r\n            \r\n            console.log(\"AuthProvider couldn't logout user due to error\");\r\n            return logoffAuthServiceResponse;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n\r\n        <AuthContext.Provider value={{\r\n            userState,\r\n            logIn,\r\n            logOff,\r\n            loginStatus,\r\n\r\n            email: userState.email,\r\n            firstName: userState.firstName,\r\n            lastName: userState.lastName,\r\n            role: userState.role,\r\n            loggedIn: userState.loggedIn,\r\n            lastLesson: userState.lastLesson,\r\n            modulesCompleted: userState.modulesCompleted,\r\n\r\n            isAuth,\r\n            setIsAuth,\r\n\r\n            setUserData,\r\n            setLastLesson,\r\n            setModulesCompleted,\r\n            addLessonIdToModuleCompleted,\r\n            setModuleFinished,\r\n            addNextModule\r\n        }}>\r\n\r\n        {children}\r\n        \r\n        </AuthContext.Provider>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthProvider';\r\n//nnnnnimport { useTitle } from '../../context/TitleProvider'\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n\r\n\r\n\r\n\r\n/**This component is used to display the navigation links. It is the blue horizantal menu bar that is second\r\n * from the top below the ProfileBar. It show links depending on what Route the user is currently in.\r\n * Regular user get one set of links, users get another set, and the Admin get another set. These links\r\n * correspond to the level of access they will have to the the apps functions and UI\r\n */\r\nconst Navbar = () => {\r\n    const [ links, setLinks ] = useState([{name: 'Home', to: '/'}]);\r\n    const [ title, setTitle ] = useState('TITLE');\r\n\r\n    // on initial Navbar component load, determine what location we're at and set links accordingly\r\n    const location = useLocation();\r\n\r\n    // get user logged in state from auth context to aid in link building\r\n    const { userState } = useAuth();\r\n\r\n    useEffect(() => {\r\n        setLinks([{name: 'Home', to: '/'}]);\r\n\r\n        // on link or user change, reset links and title, then determine them again\r\n        // must be set in this specific order as React batches state changes, but keeps order\r\n        // so we also must use previous state in setState functions\r\n        determineLinks()\r\n    }, [location.pathname, userState.loggedIn]);\r\n\r\n    const determineLinks = () => {\r\n        if ( location.pathname === '/progress' || location.pathname === '/userdashboard' || location.pathname === '/presentor' )\r\n        {\r\n            if ( userState.role === 'admin' || userState.role === 'instructor' )\r\n            {\r\n                setTitle(\"Admin Dashboard\");\r\n\r\n                setLinks(prev => [...prev, \r\n                    {name: 'Users Statistics', to:'/adminusers'},\r\n                    {name: 'My Profile', to:'/myprofile'},\r\n                    {name: 'My Dashboard', to:'/userdashboard'}\r\n                ]);\r\n            }\r\n            else\r\n            {\r\n                setTitle(\"Userdashboard\");\r\n\r\n                setLinks(prev => [...prev, \r\n                    {name: 'My Profile', to:'/myprofile'},\r\n                    {name: 'My Dashboard', to:'/userdashboard'}\r\n                ]);\r\n            }\r\n        }\r\n        else if ( location.pathname === '/myprofile' )\r\n        {\r\n            setTitle(\"My Profile\");\r\n\r\n            setLinks(prev => [...prev, \r\n                {name: 'My Dashboard', to:'/userdashboard'}\r\n            ]);\r\n        }\r\n        else if ( location.pathname === '/adminusers' )\r\n        {\r\n            setTitle(\"Users Statistics\");\r\n\r\n            setLinks(prev => [...prev, \r\n                {name: 'My Profile', to:'/myprofile'},\r\n                {name: 'My Dashboard', to:'/userdashboard'}\r\n            ]);\r\n        }\r\n        else\r\n        {\r\n            if ( userState.loggedIn )\r\n            {\r\n                setTitle(\"Welcome\");\r\n\r\n                setLinks(prev => [...prev,         \r\n                    {name: 'About Us', to: '/aboutus'},\r\n                    {name: 'My Profile', to:'/myprofile'},\r\n                    {name: 'My Dashboard', to:'/userdashboard'},\r\n                    {name: 'Contact', to: '/contactus'}\r\n                ]);\r\n            }\r\n            else\r\n            {\r\n                setTitle(\"Safety First \");\r\n                \r\n                setLinks(prev => [...prev,         \r\n                    {name: 'About Us', to: '/aboutus'},\r\n                    {name: 'Training Videos', to: '/traininginfo'},\r\n                    {name: 'Contact', to: '/contactus'}\r\n                ]);\r\n            }\r\n        }\r\n\r\n        //console.log(`location.pathname === '/'`, location.pathname === '/')\r\n        //console.log('location.pathname:', location.pathname)\r\n    }\r\n\r\n\r\n\r\n\r\n    // go through our link state and create a button for each one\r\n    const showNavButtons = () => {\r\n        return links.map(btn => <li key={btn.to}><Link to={btn.to}>{btn.name}</Link></li>);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className='nav-title'>\r\n                \r\n                <span style={{float: \"left!important\", fontWeight: \"bold\", fontSize: \"larger\", opacity: \"90%\", color: \"orange\", marginRight: \"20px\"}} >\r\n                    {title}\r\n                </span>\r\n                \r\n            </div>\r\n\r\n            <ul>\r\n                {showNavButtons()}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Navbar;\r\n","import React, {useState} from 'react';\nimport { Link } from 'react-router-dom'\nimport { useAuth } from '../../context/AuthProvider'\n\n\n\n\n/**This is the landing home page component. It is the root '/' route. It displays the company information\n * for people to see.\n */\nconst Landing = () => {\n    const [visible, setVisible] = useState(0);\n\n    const register = {\n        backgroundColor: '#fc6633',\n\t\tfont: 'inherit',\n        color: 'white',\n    \tfontWeight: 'bold',\n\t\tfontSize: 'xx-large',\n  \t\tborderRadius: '5px',\n\t\tpadding: '20px 50px 20px 50px',\n\t\ttextDecoration: 'none',\n    }\n\n    const textStyle = {\n        fontWeight: 'bold',\n\t\tfontSize: '200%',\n\t\tmarginBottom: '25px'\n    }\n\n    const leftArrow = {\n\t\tdisplay: 'grid',\n\t\tgridColumn: '1/2',\n\t\tgridRow: '1/2',\n\t\toverflow: 'visible',\n\n\t\tjustifySelf: 'center',\n\t\talignSelf: 'center'\n    }\n    const slideStyle = {\n\t\tdisplay: 'grid',\n\t\tgridColumn: '2/3',\n\t\tgridRow: '1/2', \n\t\theight: '500px',\n\t\twidth: '900px',\n\t\tjustifySelf: 'center',\n    }\n    const rightArrow = {\n\t\tdisplay: 'grid',\n\t\tgridColumn: '3/4',\n\t\tgridRow: '1/2',\n\t\toverflow: 'visible',\n\n\t\tjustifySelf: 'center',\n\t\talignSelf: 'center'\n    }\n\n\tconst background = '/resources/images/Landing_Image.png'\n\tconst img0 = '/resources/images/careTeam.png';\n\tconst img1 = '/resources/images/background_introduction.png';\n\tconst img2 = '/resources/images/module2_3.png';\n\n    const state = {\n    \timgList: [img0, img1, img2]\n    }\n\n    const moveForeward = () => {\n\t\tif (visible < 2) \n\t\t{\n\t\t\treturn setVisible(visible+1);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tsetVisible(0);\n\t\t\treturn 0;\n\t\t}\n    }\n\n    const moveBackward = () => {\n\t\t//console.log(visible);\n\t\tif (visible > 0) {\n\t\t\treturn setVisible(visible-1);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tsetVisible(2);\n\t\t\treturn 0;\n\t\t}\n    }\n\tconst { userState } = useAuth()\n\tconst showRegisterNowBtn = () => {\n\t\tif ( userState.loggedIn )\n\t\t{\n\t\t\treturn null\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn <Link to='/register' style={register}> REGISTER NOW </Link>\n\t\t}\n\t}\n\n    return (\n\t\t<div className='landing-grid-layout'>\n\n\t\t\t<div className='landing' style={{\n\t\t\t\tbackgroundImage: `url(${background})`,\n\t\t\t\tbackgroundRepeat: 'no-repeat',\n\t\t\t\tbackgroundSize: 'cover',\n\t\t\t\theight: '700px',\n\t\t\t\t\n\t\t\t}}>\n\n\t\t\t</div>\n\n\t\t\t<div className='sample-pane'>\n\t\t\t\t<div style={{\n\t\t\t\t\t\theight: '100%',\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\t\tmarginBottom: '30px'\n\t\t\t\t\t}}>\n\t\t\t\t\t<div style={textStyle}>\n\t\t\t\t\t\t<h2>Critical Training Waiting For You!</h2>\n\t\t\t\t\t</div>\n\t\t\t\t\t{showRegisterNowBtn()}\n\t\t\t\t</div>\n\t\t\t\t<div style={{\n\t\t\t\t\tdisplay: 'grid',\n\t\t\t\t\twidth: '100%',\n\t\t\t\t\tgridTemplateColumns: 'max-content max-content max-content',\n\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\tuserSelect: 'none'\n\t\t\t\t}}>\n\t\t\t\t\t<svg style={leftArrow} viewBox='0 0 100 100' width='25%' height='25%'>\n\t\t\t\t\t\t<path d='M 50 0 L 100 100 L 0 100 z' style={{fill: '#fc6633', stroke: '#fc6633', strokeWidth:'20px'}} transform='rotate(-90 50 50)' strokeLinejoin='round' onClick={moveBackward}/>\n\t\t\t\t\t</svg>\n\t\t\t\t\t<img src={state.imgList[visible]} style={slideStyle}/>\n\t\t\t\t\t<svg style={rightArrow} viewBox='0 0 100 100' width='25%' height='25%'>\n\t\t\t\t\t\t<path d='M 50 0 L 100 100 L 0 100 z' style={{fill: '#fc6633', stroke: '#fc6633', strokeWidth:'20px'}} transform='rotate(90 50 50)' strokeLinejoin='round' onClick={moveForeward}/>\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<footer>\n\t\t\t\t<h1>Contact Us</h1>\n\t\t\t\t<h3>(888) 888-888</h3>\n\t\t\t\t<h3>info@k12assessment.com</h3>\n\t\t\t</footer>\n        </div>\n    )\n}\n\nexport default Landing;","import './auth.css';\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthProvider';\r\n\r\n//Any comment code with $* in front is JWT code that is now removed or replaced with express-sessions\r\n//$*import axios from 'axios'; now using AuthProvider that uses authService to do axios calls\r\n//$*import { GlobalContext } from '../../context/GlobalState';\r\n\r\n\r\n\r\n\r\n\r\n/*This component is used to login users and create a express session on the server. It was\r\n* us to store a JWT \"authToken\" in the local storage that is encrypted but now uses express-sessions.\r\n* The user enters their email and password that is then authenticated on the server and database.\r\n* The login uses the context/AuthProvider logIn then onto loginUser /services/authService to\r\n* send user credentials to the server. If it is verified and correct in the AuthProvider it sets the Global\r\n* context in the AuthProvider to 'true' so that it is accessible to all the components via app.js\r\n*/\r\nconst LoginScreen = () => {\r\n\r\n    //state functions to set state variables\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n\r\n\r\n    //import the Global Context state variables and methods\r\n    const{ loginStatus, setUserData, setLastLesson, setModulesCompleted} = useAuth();//useContext(GlobalContext);\r\n\r\n    const { userState, logIn } = useAuth();\r\n\r\n    const history = useHistory();\r\n\r\n    //When first rendering the component it checks to see if the user has already been authenticated by checking\r\n    // if a JWT \"authToken\" is set. If so then the user is redirected to the root \"/\" home page  \r\n    useEffect(() => {\r\n        //redirect user to landing home page if they are logged in\r\n        if ( userState.loggedIn )\r\n        {\r\n            history.push(\"/\");\r\n        }\r\n        //$*if ( localStorage.getItem(\"authToken\") ){\r\n        //$*   history.push(\"/userdashboard\");\r\n        //$*}\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    //form submit handler to set email and password register data to node server for authentication\r\n    const loginHandler = async (Event) => {\r\n        Event.preventDefault();\r\n\r\n        setIsProcessing(true);\r\n\r\n        //configuration file for Axios to set a header line content type to application/json\r\n        //$*const config = {\r\n        //$*    header: {\"Content-Type\": \"application/json\" }\r\n        //$*}\r\n\r\n        //try to send register data to node server via Axios\r\n        try {      \r\n\r\n            const authProviderResponse = await logIn({email, password});\r\n            \r\n            //used for tests\r\n            //console.log(\"Login response: \" + authProviderResponse);\r\n            //$*const serverData = await axios.post(\"/api/auth/login\", {email, password}, config);/*test-.then((response)=>{\r\n            //$*    console.log(response); using the AuthProvider that uses the authService\r\n            //$*    return response;\r\n            //$*})*/\r\n\r\n            //test-console.log(\"serverData is: \" + serverData.data.token);\r\n            \r\n            //extract token from server response and save to local storage for authorization permission proving logged in\r\n            //$*localStorage.setItem(\"authToken\", serverData.data.token); using express-sessions\r\n\r\n            //if there is a legit Authorization JWT set in axios response serverData then do the following\r\n            //$*if( localStorage.getItem(\"authToken\") ) {\r\n                //test-console.log(\"serverData.data\" + JSON.stringify(serverData.data));\r\n            //$*    console.log(\"Login: if======\");\r\n                //setting 'role', 'courseworkCompleted', 'name' and of the user that logged in into the Global Context state\r\n                //$*setIsAuth(true);\r\n                //$*loginStatus(true);\r\n\r\n            //if the user has successfully logged in then set global state variables in AuthProvider context\r\n            if(authProviderResponse.data.success){\r\n                setUserData({\r\n                    firstname: authProviderResponse.data.firstName, \r\n                    lastname: authProviderResponse.data.lastName, \r\n                    role: authProviderResponse.data.role\r\n                    }, true);\r\n\r\n                //setting last Lesson into AuthProvider Global Context State \r\n                setLastLesson({ module: authProviderResponse.data.lastLesson.module,\r\n                                lessonId: authProviderResponse.data.lastLesson.lessonId }, true);\r\n\r\n                //setting modules completed AuthProvider into Global Context State\r\n                setModulesCompleted(authProviderResponse.data.modulesCompleted, true);\r\n                \r\n            } else{\r\n                console.log(\"Login: else======\");\r\n                //reset Global Context state and storage variables because user isn't logged in\r\n                setUserData({firstname: \"\", \r\n                    lastname: \"\", \r\n                    role: \"\"}, false);\r\n\r\n                loginStatus(false);\r\n\r\n                setLastLesson({module: 0, lessonId: 0}, false)\r\n                setModulesCompleted([{ module: 0, lessonIds: [0], moduleFinish: false }], false);\r\n            }\r\n\r\n\r\n\r\n            //redirect user to user dashboard if login is successful\r\n            history.push(\"/userdashboard\");\r\n\r\n        }catch (error){\r\n\r\n            //show error message on the form page below\r\n            //setErrorMessage(error.response.data.error);\r\n            console.log(error);\r\n            setErrorMessage(\"Error occurred, user password or email didn't match\");\r\n            //Set the error message to empty in 5 sec\r\n            setTimeout(() => {\r\n                setErrorMessage(\"\");\r\n                setIsProcessing(false);\r\n            },\r\n            5000);\r\n        }\r\n\r\n    }//registerHandler\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className='login-grid-layout backColorOrange' >\r\n\r\n            <div className=\"centerLoginContainer\">\r\n                \r\n                <div className=\"centerBox\">\r\n\r\n                    <form onSubmit={loginHandler}>\r\n\r\n                        \r\n                            <label htmlFor=\"email\"><h2>Email:</h2></label>\r\n                            \r\n                            <input type=\"text\" required id=\"email\" placeholder=\"Enter Email\" \r\n                            value={email} onChange={(Event) => setEmail(Event.target.value)} />  \r\n                        \r\n                                \r\n                          \r\n                            <label htmlFor=\"password\"><h2>Password:</h2></label>\r\n                            <input \r\n                                type=\"password\" \r\n                                required id=\"password\" \r\n                                placeholder=\"Password\" \r\n                                value={password} \r\n                                minLength='8' \r\n                                onChange={(Event) => setPassword(Event.target.value)} \r\n                            />  \r\n                       \r\n\r\n                        <div className='form-group'>\r\n                            <div className='button-holder'> \r\n                                <button disabled={isProcessing} type=\"submit\" className=\"buttonLogin\">{isProcessing? <h2>Processing</h2> : <h2>Login</h2> }</button>\r\n                            </div>\r\n                        </div>\r\n                \r\n\r\n                        \r\n                        {errorMessage && <p style={{textAlign: \"center\", }}><span style={{fontWeight: \"bold\", fontSize: \"17px\", color: \"red\"}}>{errorMessage} </span></p>}\r\n                        <span className='smaller-text' style={{color: 'red'}}></span> \r\n                        <center>\r\n                        <p><Link style={{textDecoration: \"none\", color: \"black\", fontSize: \"17px\"}} to=\"/register\">Don't have an account? Register</Link></p>\r\n\r\n                        <p><Link style={{textDecoration: \"none\", color: \"black\", fontSize: \"17px\"}} to=\"/forgotpassword\">Forgot Password?</Link></p>\r\n                        </center>\r\n\r\n                    </form>\r\n\r\n                </div>\r\n\r\n             </div>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default LoginScreen\r\n\r\n","import './auth.css';\r\nimport {useState, useEffect, useRef} from 'react';\r\nimport axios from 'axios';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthProvider';\r\n\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\n\r\n/**This component is used to register the user. It takes the required fields and sends them to the server.\r\n* First it checks if the user is already logged in. If so then it immediately redirects them to the root page.\r\n* Once registered, it redirects them to the root homepage. The user can register using a company license Id number\r\n* or purchase the course using STRIPE. The stripe developer API is used to processing the payments on the \r\n* server side.\r\n*/\r\nconst RegisterScreen = ( ) => {\r\n\r\n    //message to confirm the user is registered and redirected to root /\r\n    const[registeredMessage, setRegisteredMessage] = useState(\"\");\r\n\r\n    //state functions to set state variables\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirmpassword, setConfirmPassword] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    //account type and total to purchase\r\n    const [accountType, setAccountType] = useState(\"self\");\r\n    const [licensetotal, setLicenseTotal] = useState(1);\r\n    const [billingAmount, setBillingAmount] = useState(150);\r\n\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [middleName, setMiddleName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [address, setAddress] = useState(\"\");\r\n    const [city, setCity] = useState(\"\");\r\n    const [states, setStates] = useState(\"CA\");\r\n    const [zipcode, setZipcode] = useState(\"\");\r\n\r\n    const [month, setMonth] = useState(\"January\");\r\n    const [day, setDay] = useState(\"1\");\r\n    const [year, setYear] = useState(\"2000\");\r\n    const [gender, setGender] = useState(\"male\");\r\n    const [phone, setPhone] = useState(\"\");\r\n\r\n    //payment state setters\r\n    const [licenseIdNumber, setlicenseIdNumber] = useState(\"\");\r\n    const [registeredOrgName, setRegisteredOrgName] = useState(\"\");\r\n    const [usingCreditCard, setUsingCreditCard] = useState(false);\r\n    \r\n\r\n    //organization state setters\r\n    const [orgName, setOrgName] = useState(\"\");\r\n    const [orgAddress, setOrgAddress] = useState(\"\");\r\n    const [orgCity, setOrgCity] = useState(\"\");\r\n    const [orgStates, setOrgStates] = useState(\"\");\r\n    const [orgZipcode, setOrgZipcode] = useState(\"\");\r\n    const [orgPhone, setOrgPhone] = useState(\"\");\r\n\r\n    //used to set visiblity of registration order review text\r\n    const [isVisible, setVisiblity] = useState(false);\r\n\r\n    //used to toggle disable for organization information input textboxes\r\n    const [isSinglePerson, setIsSinglePerson] = useState(false);\r\n    const [role, setRole] = useState(\"user\");\r\n\r\n\r\n    const [showLicenseCode, setShowLicenseCode] = useState(false);\r\n    const [showCreditCard, setShowCreditCard] = useState(false);\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n    //used to display which type of payment method the user will use. Redemption license code or credit card\r\n    const displayLicenseCodeInputs = () => {\r\n        //no credit card because using a license code\r\n        setUsingCreditCard(false);\r\n\r\n        //display method\r\n        setShowLicenseCode(true);\r\n        setShowCreditCard(false);\r\n    }\r\n\r\n    const displayCreditCardInputs = () => {\r\n        setUsingCreditCard(true);\r\n        //no license code using a credit card\r\n        setlicenseIdNumber(\"\");\r\n        setRegisteredOrgName(\"\");//no license, so no registered organization \r\n\r\n        //display method\r\n        setShowLicenseCode(false);\r\n        setShowCreditCard(true);\r\n\r\n    }\r\n\r\n\r\n    //calcultate the total price for the course licenses to purchase\r\n    const setLicenseTotalandCalculateBill = Event =>{\r\n        setLicenseTotal(Event);\r\n        let billTotal = Event*150;\r\n        setBillingAmount(billTotal);\r\n    }\r\n\r\n    //handler function to set account type in the select dropdown menu\r\n    const selectAccountHandler = Event => {\r\n        setAccountType(Event);\r\n        //test-console.log(Event);\r\n    }\r\n    //handler function to set gender in the select dropdown menu\r\n    const selectGenderHandler = Event => {\r\n        setGender(Event);\r\n        //test-console.log(Event);\r\n    }\r\n    //handler function to set role type in the select dropdown menu\r\n    const selectRoleHandler = Event => {\r\n        setRole(Event);\r\n    }\r\n\r\n    //this function disables the organization information input textboxes if the checkbox is clicked for a single\r\n    //user license and set all organization input textboxs to blank\r\n    const toggleTextboxDisabled = (value) => {\r\n        //test-console.log(value);\r\n        setIsSinglePerson(!isSinglePerson);\r\n\r\n        setOrgName(\"\");\r\n        setOrgAddress(\"\");\r\n        setOrgCity(\"\");\r\n        setOrgStates(\"\");\r\n        setOrgZipcode(\"\");\r\n        setOrgPhone(\"\");\r\n\r\n    }\r\n\r\n    const { userState, login } = useAuth();\r\n\r\n    // review form div is attached to this ref, so we can use it in JavaScript and scroll to div manually\r\n    const reviewFormRef = useRef(null);\r\n    const history = useHistory();\r\n\r\n    //used to process stripe credit card payments\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    let startyear = (new Date()).getFullYear();\r\n    const years = Array.from(new Array(100), (val, index) => startyear - index );\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (isVisible) \r\n        {\r\n            reviewFormRef.current.scrollIntoView({behavior: 'smooth', block: \"start\", inline: \"nearest\"});\r\n        }\r\n    }, [isVisible])\r\n\r\n    //check to see if the user has already been authenticated by loggin if they have the authToken. \r\n    //Redirect to root if logged when this functional component first renders\r\n    useEffect(() => {\r\n        if( userState.loggedIn){\r\n            //$*localStorage.getItem(\"authToken\")){\r\n            \r\n            history.push(\"/\");\r\n        }\r\n    }, [history]);\r\n\r\n\r\n\r\n\r\n\r\n    //form submit handler to set and send username, email, password to node server\r\n    const registerHandler = async (Event) => {\r\n        Event.preventDefault();\r\n\r\n        setIsProcessing(true);\r\n\r\n        //make sure the passwords match or set error message and reset in 5 sec\r\n        if(password != confirmpassword) {\r\n            setEmail(\"\");\r\n            setPassword(\"\");\r\n            setConfirmPassword(\"\");\r\n            setTimeout(() => {\r\n                setErrorMessage(\"\");\r\n            }, 5000);\r\n\r\n            return setErrorMessage(\"Enter a password that matches\");\r\n        }\r\n\r\n        // check if user is at 0 quanity\r\n        if ( licensetotal < 1 )\r\n        {\r\n            setTimeout(() => {\r\n                setErrorMessage(\"\");\r\n            }, 5000);\r\n            return setErrorMessage(\"You must have a quantity of at least 1 license!\");\r\n        }\r\n\r\n        const userDetails = {\r\n            username, \r\n            email, \r\n            password,\r\n\r\n            accountType,\r\n            licensetotal,\r\n            billingAmount,\r\n\r\n            firstName,\r\n            middleName,\r\n            lastName,\r\n            address,\r\n            city,\r\n            states,\r\n            zipcode,\r\n            month,\r\n            day,\r\n            year,\r\n            gender,\r\n            phone,\r\n\r\n            isSinglePerson,\r\n            role,\r\n\r\n            orgName,\r\n            orgAddress,\r\n            orgCity,\r\n            orgStates,\r\n            orgZipcode,\r\n            orgPhone,\r\n\r\n            registeredOrgName,\r\n            licenseIdNumber,  \r\n            usingCreditCard\r\n        }\r\n        \r\n        //configuration file for Axios to set a header line content type to application/json\r\n        const config = {\r\n            header: {\"Content-Type\": \"application/json\" }\r\n        }\r\n\r\n        //try to send register data to node server via Axios\r\n        try {\r\n\r\n\r\n\r\n            //The user had a COMPANY LICENSE CODE to be able to register\r\n            if(showLicenseCode){\r\n\r\n                const serverData = await axios.post(\"/api/auth/register\", userDetails);\r\n\r\n            }\r\n\r\n\r\n\r\n            //The user is going to use their CREDIT CARD to register\r\n            if(showCreditCard){\r\n\r\n                //this is used to get the payment method id from stripe  to charge the user on the backend\r\n                //country code is hard coded because the course will only qualify in CA, USA\r\n                const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n                    type: \"card\",\r\n                    card: elements.getElement(CardElement),\r\n\r\n                    billing_details: {\r\n                        email: email,\r\n                        name: firstName + \" \" + middleName + \" \" + lastName,\r\n                        phone: phone,\r\n                        address: {\r\n                            city: city,\r\n                            country: \"US\",\r\n                            line1: address,\r\n                            state: states\r\n                        }\r\n                    }\r\n\r\n                });\r\n\r\n\r\n                if(!error){\r\n                    console.log(paymentMethod);\r\n                    //extracting the stripe payment method id \r\n                    const { id } = paymentMethod;\r\n\r\n                    //adding the payment method id to the billing details to send to the server backend to charge\r\n                    userDetails[\"stripeId\"] = id;\r\n\r\n                    console.log(userDetails);\r\n\r\n                    //sending the user details along with stripe payment method id and bill price in pennies\r\n                    const serverData = await axios.post(\"/api/auth/register\", userDetails);\r\n\r\n                    console.log(serverData.data);\r\n\r\n                }else{\r\n                    setErrorMessage(error.message);\r\n                    setIsProcessing(false);\r\n                }\r\n\r\n               \r\n            }\r\n            \r\n\r\n\r\n            //extract token and save to local storage for authorization permission proving logged in\r\n            //localStorage.setItem(\"authToken\", serverData.token);\r\n            setRegisteredMessage(\"You have been registered, Please login in\");\r\n\r\n            //redirect page back to root homepage\r\n            setTimeout(() => {\r\n                \r\n                history.push(\"/login\");\r\n            },\r\n            5000);\r\n\r\n        } catch (error) {\r\n            setErrorMessage(error.response.data.error);\r\n            setIsProcessing(false);\r\n\r\n /*           //Set the error message to empty in 5 sec\r\n            setTimeout(() => {\r\n                setErrorMessage(\"\");\r\n            },\r\n            5000);*/\r\n        }\r\n\r\n    }//registerHandler\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //custom payment method choice button css styles\r\n    const paymentButton = {\r\n        padding: \"10px\",\r\n        margin: \"10px\",\r\n        backgroundColor: \"lightblue\",\r\n        color: \"black\",\r\n        border: '1px solid black',\r\n\r\n    }\r\n\r\n/*// This is replaced with the stripe developer API elements component\r\n\r\n    <label htmlFor=\"creditcard\">Credit Card Number:</label>\r\n    <input \r\n        type=\"text\" \r\n        id=\"creditcard\" \r\n        placeholder=\"Card Number\" \r\n        value={creditcard} \r\n        onChange={(Event) => setCreditCard(Event.target.value)} \r\n    /> \r\n\r\n    */\r\n\r\n    //This is used to style the Stripe credit card box according to the Strip API\r\n    const cardElementOptions = {\r\n\r\n        style: {\r\n\r\n            base: {\r\n                fontSize: \"25px\",\r\n                border: \"1px solid black\",\r\n                color: \"black\",\r\n                \"::placeholder\": {\r\n                    color: \"orange\"\r\n                }\r\n\r\n            },\r\n            invalid: {\r\n\r\n            },\r\n            complete: {\r\n                color: \"green\" \r\n                    },\r\n        },\r\n        \r\n\r\n    }\r\n\r\n    return(\r\n        <div className='register-grid-layout backColorOrange'>\r\n\r\n        \r\n\r\n\r\n            <form  className=\"registrationform\" onSubmit={registerHandler}>\r\n                <br/>\r\n                <center>\r\n                <label><h1> Registration</h1></label>\r\n                </center>\r\n                <br/>\r\n\r\n                <div className='form-group'>  \r\n                    <label htmlFor=\"username\">Username:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required id=\"username\" \r\n                        placeholder=\"Enter Username\" \r\n                        value={username} \r\n                        onChange={(Event) => setUsername(Event.target.value)} \r\n                    />\r\n                </div>\r\n\r\n                <div className='form-group'>\r\n                    <label htmlFor=\"email\">Email:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required id=\"email\" \r\n                        placeholder=\"Enter your email\" \r\n                        value={email} \r\n                        onChange={(Event) => setEmail(Event.target.value)} \r\n                    /> \r\n                </div> \r\n                        \r\n                <div className='form-group'>\r\n                    <label htmlFor=\"password\">Password:</label>\r\n                    <input \r\n                        type=\"password\" \r\n                        required id=\"password\" \r\n                        placeholder=\"Enter Password\" \r\n                        value={password} minLength='8' \r\n                        onChange={(Event) => setPassword(Event.target.value)} \r\n                    />  \r\n                </div>\r\n\r\n                <div className='form-group'>\r\n                    <label htmlFor=\"confirmpassword\">Confirm Password:</label>\r\n                    <input \r\n                        type=\"password\" \r\n                        required id=\"confirmpassword\" \r\n                        placeholder=\"Comfirm Password\" \r\n                        value={confirmpassword} \r\n                        minLength='8' \r\n                        onChange={(Event) => setConfirmPassword(Event.target.value)} \r\n                    />        \r\n                </div>\r\n\r\n                <br/>\r\n                <br/>\r\n\r\n                <div className='form-group'>  \r\n                    <label htmlFor=\"firstName\">First name:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required id=\"firstName\" \r\n                        placeholder=\"First Name\" \r\n                        value={firstName} \r\n                        onChange={(Event) => setFirstName(Event.target.value)} \r\n                    />\r\n                </div>\r\n            \r\n                <div className='form-group'>  \r\n                    <label htmlFor=\"middleName\">Middle name:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required id=\"middleName\" \r\n                        placeholder=\"Middle Name\" \r\n                        value={middleName} \r\n                        onChange={(Event) => setMiddleName(Event.target.value)} \r\n                    />\r\n                </div>\r\n\r\n                <div className='form-group'>\r\n                    <label htmlFor=\"lastName\">Last Name:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required id=\"lastName\" \r\n                        placeholder=\"Last Name\" \r\n                        value={lastName} \r\n                        onChange={(Event) => setLastName(Event.target.value)} \r\n                    /> \r\n                </div> \r\n                        \r\n                <div className='form-group'>\r\n                    <label htmlFor=\"address\">Address:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required id=\"address\" \r\n                        placeholder=\"Address\" \r\n                        value={address} \r\n                        onChange={(Event) => setAddress(Event.target.value)} \r\n                    />  \r\n                </div>\r\n                \r\n                <div className='form-group'>\r\n                    <label htmlFor=\"city\">City:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required id=\"city\" \r\n                        placeholder=\"City\" \r\n                        value={city} \r\n                        onChange={(Event) => setCity(Event.target.value)} \r\n                    />        \r\n                </div>\r\n\r\n\r\n               \r\n                    <label htmlFor=\"states\">State:</label>\r\n\r\n                    <select name=\"states\" id=\"states\" placeholder=\"CA\" onChange={(Event) => setStates(Event.target.value)} >\r\n\r\n                    <option value=\"AL\">Alabama</option>\r\n                        <option value=\"AK\">Alaska</option>\r\n                        <option value=\"AZ\">Arizona</option>\r\n                        <option value=\"AR\">Arkansas</option>\r\n                        <option value=\"CA\">California</option>\r\n                        <option value=\"CO\">Colorado</option>\r\n                        <option value=\"CT\">Connecticut</option>\r\n                        <option value=\"DE\">Delaware</option>\r\n                        <option value=\"DC\">District of Columbia</option>\r\n                        <option value=\"FL\">Florida</option>\r\n                        <option value=\"GA\">Georgia</option>\r\n                        <option value=\"HI\">Hawaii</option>\r\n                        <option value=\"ID\">Idaho</option>\r\n                        <option value=\"IL\">Illinois</option>\r\n                        <option value=\"IN\">Indiana</option>\r\n                        <option value=\"IA\">Iowa</option>\r\n                        <option value=\"KS\">Kansas</option>\r\n                        <option value=\"KY\">Kentucky</option>\r\n                        <option value=\"LA\">Louisiana</option>\r\n                        <option value=\"ME\">Maine</option>\r\n                        <option value=\"MD\">Maryland</option>\r\n                        <option value=\"MA\">Massachusetts</option>\r\n                        <option value=\"MI\">Michigan</option>\r\n                        <option value=\"MN\">Minnesota</option>\r\n                        <option value=\"MS\">Mississippi</option>\r\n                        <option value=\"MO\">Missouri</option>\r\n                        <option value=\"MT\">Montana</option>\r\n                        <option value=\"NE\">Nebraska</option>\r\n                        <option value=\"NV\">Nevada</option>\r\n                        <option value=\"NH\">New Hampshire</option>\r\n                        <option value=\"NJ\">New Jersey</option>\r\n                        <option value=\"NM\">New Mexico</option>\r\n                        <option value=\"NY\">New York</option>\r\n                        <option value=\"NC\">North Carolina</option>\r\n                        <option value=\"ND\">North Dakota</option>\r\n                        <option value=\"OH\">Ohio</option>\r\n                        <option value=\"OK\">Oklahoma</option>\r\n                        <option value=\"OR\">Oregon</option>\r\n                        <option value=\"PA\">Pennsylvania</option>\r\n                        <option value=\"RI\">Rhode Island</option>\r\n                        <option value=\"SC\">South Carolina</option>\r\n                        <option value=\"SD\">South Dakota</option>\r\n                        <option value=\"TN\">Tennessee</option>\r\n                        <option value=\"TX\">Texas</option>\r\n                        <option value=\"UT\">Utah</option>\r\n                        <option value=\"VT\">Vermont</option>\r\n                        <option value=\"VA\">Virginia</option>\r\n                        <option value=\"WA\">Washington</option>\r\n                        <option value=\"WV\">West Virginia</option>\r\n                        <option value=\"WI\">Wisconsin</option>\r\n                        <option value=\"WY\">Wyoming</option>\r\n\r\n                    </select>\r\n                \r\n\r\n\r\n            \r\n                <div className='form-group'>  \r\n                    <label htmlFor=\"zipcode\">Zip Code:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required id=\"zipcode\" \r\n                        placeholder=\"Zip Code\" \r\n                        value={zipcode} \r\n                        onChange={(Event) => setZipcode(Event.target.value)} \r\n                    />\r\n                </div>\r\n        \r\n\r\n                <div className='form-group'>\r\n                    <label htmlFor=\"month\">Month:</label>\r\n\r\n                    <select name=\"month\" id=\"month\" placeholder=\"01\" onChange={(Event) => setMonth(Event.target.value)} >\r\n\r\n                    <option value=\"\" selected disabled hidden>Choose Month</option>\r\n                        <option value=\"01\">January</option>\r\n                        <option value=\"02\">February</option>\r\n                        <option value=\"03\">March</option>\r\n                        <option value=\"04\">April</option>\r\n                        <option value=\"05\">May</option>\r\n                        <option value=\"06\">June</option>\r\n                        <option value=\"07\">July</option>\r\n                        <option value=\"08\">August</option>\r\n                        <option value=\"09\">September</option>\r\n                        <option value=\"10\">October</option>\r\n                        <option value=\"11\">November</option>\r\n                        <option value=\"12\">December</option>\r\n\r\n                    </select>\r\n                </div>\r\n\r\n\r\n                <div className='form-group'>\r\n                    <label htmlFor=\"day\">Day:</label>\r\n\r\n                    <select name=\"day\" id=\"day\" placeholder=\"01\" onChange={(Event) => setDay(Event.target.value)} >\r\n\r\n                    \r\n                        <option value=\"01\">01</option>\r\n                        <option value=\"02\">02</option>\r\n                        <option value=\"03\">03</option>\r\n                        <option value=\"04\">04</option>\r\n                        <option value=\"05\">05</option>\r\n                        <option value=\"06\">06</option>\r\n                        <option value=\"07\">07</option>\r\n                        <option value=\"08\">08</option>\r\n                        <option value=\"09\">09</option>\r\n                        <option value=\"10\">10</option>\r\n                        <option value=\"11\">11</option>\r\n                        <option value=\"12\">12</option>\r\n                        <option value=\"13\">13</option>\r\n                        <option value=\"14\">14</option>\r\n                        <option value=\"15\">15</option>\r\n                        <option value=\"16\">16</option>\r\n                        <option value=\"17\">17</option>\r\n                        <option value=\"18\">18</option>\r\n                        <option value=\"19\">19</option>\r\n                        <option value=\"20\">20</option>\r\n                        <option value=\"21\">21</option>\r\n                        <option value=\"22\">22</option>\r\n                        <option value=\"23\">23</option>\r\n                        <option value=\"24\">24</option>\r\n                        <option value=\"25\">25</option>\r\n                        <option value=\"26\">26</option>\r\n                        <option value=\"27\">27</option>\r\n                        <option value=\"28\">28</option>\r\n                        <option value=\"29\">29</option>\r\n                        <option value=\"30\">30</option>\r\n                        <option value=\"31\">31</option>\r\n\r\n                    </select>\r\n                </div>\r\n                        \r\n                \r\n                <div className='form-group'>\r\n                    <label htmlFor=\"year\">year:</label>\r\n\r\n                    <select name=\"year\" id=\"year\" placeholder=\"1950\" onChange={(Event) => setYear(Event.target.value)} >\r\n\r\n                    { years.map((year, index) => {\r\n                            return <option key={`year${index}`} value={year}>{year}</option>\r\n                        })}\r\n\r\n                    </select>\r\n                </div>\r\n\r\n                <div className='form-group'>\r\n                    <label htmlFor=\"gender\">Gender:</label>\r\n\r\n                    <select name=\"gender\" id=\"gender\" placeholder=\"male\" onChange={(Event) => selectGenderHandler(Event.target.value)} >\r\n\r\n                        <option value=\"male\">Male</option>\r\n                        <option value=\"female\">Female</option>\r\n                        <option value=\"other\">Other</option>\r\n\r\n                    </select>\r\n                </div>\r\n\r\n                <div className='form-group'>\r\n                    <label htmlFor=\"phone\">Phone Number:</label>\r\n                    <input \r\n                        type=\"tel\" \r\n                        required id=\"phone\" \r\n                        placeholder=\"Phone\" \r\n                        value={phone} \r\n                        onChange={(Event) => setPhone(Event.target.value)} />  \r\n                </div>\r\n\r\n                <br/>\r\n                <br/>\r\n\r\n                <div className='form-group'>\r\n                    \r\n                    <label htmlFor=\"accountType\">Choose Account Type: </label>\r\n\r\n                    <select required name=\"accountType\" id=\"accountType\" placeholder=\"self\" onChange={(Event) => selectAccountHandler(Event.target.value)} >\r\n\r\n                        <option value=\"self\">Self</option>\r\n                        <option value=\"school\">School</option>\r\n                        <option value=\"business\">Business</option>\r\n                        <option value=\"government\">Government</option>\r\n                        <option value=\"nonProfit\">Non-Profit</option>\r\n\r\n                    </select>\r\n                </div>\r\n\r\n                <div className='form-group'>\r\n                    <label htmlFor=\"licensetotal\">Number of Licenses:</label>\r\n                    <input \r\n                        type=\"number\" \r\n                        required id=\"licensetotal\" \r\n                        placeholder=\"License total\" \r\n                        value={licensetotal} \r\n                        onChange={(Event) => setLicenseTotalandCalculateBill(Event.target.value)} \r\n                    />        \r\n                </div>\r\n\r\n                <div className='form-group'>\r\n                    \r\n                    <label htmlFor=\"role\">Your Role: </label>\r\n\r\n                    <select required name=\"role\" id=\"role\" placeholder=\"user\" onChange={(Event) => selectRoleHandler(Event.target.value)} >\r\n\r\n                        <option value=\"user\">User</option>\r\n                        <option value=\"admin\">Admin</option>\r\n\r\n                    </select>\r\n                </div>\r\n\r\n                    \r\n                <br/>\r\n                <br/>\r\n\r\n                <center>\r\n\r\n                <h1 className='large'>Organization Information</h1>\r\n                \r\n\r\n                <br/>\r\n\r\n                <h4 style={{color: \"orange\", fontSize: \"20px\"}}>If you are registering a single license for yourself please check the box</h4>\r\n                \r\n                </center>\r\n                \r\n                <input \r\n                    type=\"checkbox\" \r\n                    id=\"self\" \r\n                    name=\"self\" \r\n                    value='true' \r\n                    onClick={(value) => toggleTextboxDisabled(value)}\r\n                />\r\n                <br/>\r\n\r\n                <div className='form-group'>  \r\n                    <label htmlFor=\"orgName\">Organization:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required={isSinglePerson} \r\n                        id=\"orgName\" \r\n                        placeholder=\"Organization Name\" \r\n                        value={orgName} \r\n                        disabled={isSinglePerson} \r\n                        onChange={(Event) => setOrgName(Event.target.value)} \r\n                    />\r\n                </div>  \r\n\r\n                <div className='form-group'>\r\n                    <label htmlFor=\"orgAddressOrg\">Address:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required={isSinglePerson} \r\n                        id=\"orgAddress\" \r\n                        placeholder=\"Address\" \r\n                        value={orgAddress} \r\n                        disabled={isSinglePerson} \r\n                        onChange={(Event) => setOrgAddress(Event.target.value)} \r\n                    />  \r\n                </div>\r\n                \r\n                <div className='form-group'>\r\n                    <label htmlFor=\"orgCity\">City:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required={isSinglePerson} \r\n                        id=\"orgCity\" \r\n                        placeholder=\"City\" \r\n                        value={orgCity} \r\n                        disabled={isSinglePerson} \r\n                        onChange={(Event) => setOrgCity(Event.target.value)} \r\n                    />        \r\n                </div>\r\n\r\n                <div className='form-group'>  \r\n                    <label htmlFor=\"orgStates\">State:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required={isSinglePerson} \r\n                        id=\"orgStates\" \r\n                        placeholder=\"State\" \r\n                        value={orgStates} \r\n                        disabled={isSinglePerson} \r\n                        onChange={(Event) => setOrgStates(Event.target.value)} \r\n                    />\r\n                </div>\r\n            \r\n                <div className='form-group'>  \r\n                    <label htmlFor=\"orgZipcode\">Zip Code:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        required={isSinglePerson} \r\n                        id=\"orgZipcode\" \r\n                        placeholder=\"Zip Code\" \r\n                        value={orgZipcode} \r\n                        disabled={isSinglePerson} \r\n                        onChange={(Event) => setOrgZipcode(Event.target.value)} \r\n                    />\r\n                </div>\r\n\r\n                <div className='form-group'>  \r\n                    <label htmlFor=\"orgPhone\">Phone Number:</label>\r\n                    <input \r\n                        type=\"tel\" \r\n                        required={isSinglePerson} \r\n                        id=\"orgPhone\" \r\n                        placeholder=\"Phone\" \r\n                        value={orgPhone} \r\n                        disabled={isSinglePerson} \r\n                        onChange={(Event) => setOrgPhone(Event.target.value)} \r\n                    />\r\n                </div>\r\n                \r\n                <div className='form-group'>\r\n                    <br/>\r\n\r\n                    <div className='button-holder'>\r\n                        <button onClick={() => setVisiblity(true)} type=\"button\" className=\"form-button\"><h2>Review</h2></button>\r\n                    </div>\r\n                \r\n                </div>\r\n\r\n                {/**This following JSX code is used to show and confirm the user register information so\r\n                 * they can change it if need and they then enter a company license id number previousely \r\n                 * purchased by a representaitve or admin. Or they can purchase the course vie Stripe with\r\n                 * a credit/debit card\r\n                 */}\r\n\r\n                <div ref={reviewFormRef} style={{display: isVisible ? 'block' : 'none'}}>\r\n\r\n                    <br/>\r\n                    <br/>\r\n                    <hr/>\r\n\r\n                    <h2>Review Registration Information</h2>\r\n\r\n                    <div style={{margin: 10}}>\r\n                        <table>\r\n                            <tr>\r\n                                <th>Information</th>\r\n                                <th className=\"marginLeft50\">User Entry</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Username:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{username}</span></td>\r\n                            \r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Email:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{email}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">First Name:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{firstName}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Middle Name:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{middleName}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Last Name:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{lastName}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Address:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{address}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">City:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{city}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">State:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{states}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Zip Code:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{zipcode}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">month:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{month}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">day:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{day}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">year:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{year}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Gender:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{gender}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Phone Number:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{phone}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Account Type:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{accountType}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">License Total:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{licensetotal}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Organization:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{orgName}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Address:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{orgAddress}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">City:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{orgCity}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">State:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{orgStates}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Zip Code:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{orgZipcode}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Phone Number:</span></td>\r\n                                <td><span className=\"formReviewEntry\">{orgPhone}</span></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><span className=\"formReviewLabel\">Price of license:</span></td>\r\n                                <td><span className=\"formReviewEntry\">${billingAmount}</span></td>\r\n                            </tr>\r\n                        \r\n                        </table>\r\n                        \r\n                        <br/>\r\n                    </div>\r\n                    \r\n                    <hr/>\r\n                    <br/>\r\n\r\n                    <center>\r\n\r\n                    <h1 className='large'>Payment Information</h1>\r\n\r\n                    <br/>\r\n\r\n                    <span style={paymentButton} onClick={() => displayLicenseCodeInputs()} >Code Number</span>  <span style={paymentButton} onClick={() => displayCreditCardInputs()} >Credit Card</span>\r\n\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n\r\n\r\n\r\n                    <div style={{display: showLicenseCode ? 'block' : 'none'}}>\r\n\r\n                        \r\n\r\n                        \r\n                        <h2>License Company Code method:</h2>\r\n\r\n                        <div className='form-group'>\r\n                            <label htmlFor=\"registeredOrgName\">Registered Organization Name:</label>\r\n                            <br/>\r\n                            <input \r\n                                type=\"text\" \r\n                                id=\"registeredOrgName\" placeholder=\"Registered Organization\" \r\n                                value={registeredOrgName} \r\n                                onChange={(Event) => setRegisteredOrgName(Event.target.value)} \r\n                            />  \r\n                        </div>\r\n\r\n                        <br/>\r\n                    \r\n                        <div className='form-group'>\r\n                            \r\n                            <label htmlFor=\"licenseIdNumber\">License Id Number:</label>\r\n                            <br/>\r\n                            <input \r\n                                type=\"text\" \r\n                                id=\"licenseIdNumber\" \r\n                                placeholder=\"License Id Number\" \r\n                                value={licenseIdNumber} \r\n                                onChange={(Event) => setlicenseIdNumber(Event.target.value)} \r\n                            />  \r\n                        </div>\r\n\r\n                        <br/>\r\n\r\n                        <button type=\"submit\" className=\"form-button\"><h2>Submit code and Register</h2></button>\r\n\r\n                       \r\n                    </div>\r\n\r\n\r\n\r\n\r\n                    <div style={{display: showCreditCard ? 'block' : 'none'}}>\r\n                        <h2>Credit Card payment method:</h2>\r\n                                   \r\n                            <br/>\r\n\r\n                            <div style={{border: \"1px solid black\", borderRadius: \"10px\"}}>\r\n                                <CardElement options={ cardElementOptions}/>\r\n                            </div>\r\n\r\n                            <br/>\r\n                            \r\n                            <button type=\"submit\" className=\"form-button\" disabled={isProcessing}> { isProcessing ? <h2>Processing...</h2> : <h2>Pay and Register</h2>} </button>\r\n\r\n                        \r\n                    </div>\r\n\r\n                    </center>\r\n                    \r\n                    <br/>\r\n\r\n                    <span style={{fontSize: \"20px\", color: 'green'}}>{ registeredMessage }</span>\r\n                    <span style={{fontSize: \"20px\", color: 'red'}}>{ errorMessage }</span> \r\n                    {errorMessage && <span> you have an error </span>}\r\n\r\n                    <br/>\r\n\r\n                    <span >Already have an account? <Link to=\"/login\">Login</Link></span>\r\n\r\n                </div>\r\n\r\n                <br/>  \r\n\r\n            </form>\r\n            \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default RegisterScreen\r\n\r\n\r\n\r\n","import React, { Fragment, useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './Admin.css';\r\n\r\nconst Button = () => {\r\n\tconst [bgColour, setBgColour] = useState(\"#FD6A02\");\r\n\r\n\tconst buttonStyle = {\r\n\t\tbackgroundColor: bgColour,\r\n\t\tcolor: 'black',\r\n\t\tpadding: '5px 15px',\r\n\t\tborderRadius: '5px',\r\n\t\toutline: 0,\r\n\t\ttextTransform: 'uppercase',\r\n\t\tmargin: '10px 0px',\r\n\t\tcursor: 'pointer',\r\n\t\tboxShadow: '0px 2px 2px lightgray',\r\n\t\ttransition: 'ease backgroundColor 250ms',\r\n\t\ttextAlign: 'center'\r\n\t};\r\n\r\n\treturn (\r\n\t\t<button \r\n\t\t\tstyle={buttonStyle}\r\n\t\t\tonMouseEnter={() => setBgColour('#C83F49')}\r\n\t\t\tonMouseLeave={() => setBgColour('#FD6A02')}>\r\n\t\t\tUser Progress\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nconst ProgressBar = (props) => {\r\n\tconst {bgcolor, completed} = props;\r\n\tconst fillerStyles = {\r\n\t\theight: 'inherit',\r\n\t\twidth: completed,\r\n\t\tbackgroundColor: bgcolor,\r\n\t\tborderRadius: 'inherit',\r\n\t\ttextAlign: 'right'\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"containerStyles\">\r\n\t\t\t<div style={fillerStyles}>\r\n\t\t\t\t<span className=\"labelStyles\">{completed}</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst NewTraining = () => {\r\n\treturn (\r\n\t\t<div className=\"addbox\">\r\n\t\t\t<Link to=\"/AddContent\">\r\n\t\t\t\t<h1> + </h1>\r\n\t\t\t</Link>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst Training = (props) => {\r\n\treturn (\r\n\t\t<div className=\"box\">\r\n\t\t\t<h2> {props.number} </h2>\r\n\t\t\t<h3> {props.title} </h3>\r\n\t\t\t<Button />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\n\r\nconst Admin = () => {\r\n\treturn (\r\n\t\t<div className='admin-dashboard-grid-layout'>\r\n\t\t\t<section className=\"training\">\r\n\t\t\t\t<Training number='Module 1' title='Introduction'/>\r\n\t\t\t\t<Training number='Module 2' title='Developing and Implementing an Assessment and Care Team Inquiry Process'/>\r\n\t\t\t\t<Training number='Module 3' title='Train Community Members' />\r\n\t\t\t\t<Training number='Module 4' title='Establish an Assessment and Care Team Inquiry Procedure'/>\r\n\t\t\t\t<Training number='Module 5' title='Establish an Assessment and Care Team Response Procedure'/>\r\n\t\t\t\t<Training number='Module 6' title='School Climate and Preventative Measures'/>\r\n\t\t\t\t<Training number='Module 7' title='Conclusion'/>\r\n\t\t\t\t\r\n\t\t\t</section>\r\n\t\t</div>\r\n\t\t\t\t\r\n\t);\r\n}\r\n\r\n\r\nexport default Admin;\r\n","import { useContext, useState, useEffect } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthProvider';\r\n//$*import {GlobalContext} from '../../context/GlobalState'; //ignore - was used with JWT but using sessions now\r\n\r\n\r\n\r\n/**This component is used to show if the user is logged in. It will show the user login status and logout button.\r\n * It is the top most horizontal menu bar and is black in color. If the user is not logined in it will show only\r\n * two links 'Register' and 'login'.\r\n */\r\nconst ProfileBar = () => {\r\n\r\n    const { userState, logOff } = useAuth();\r\n\r\n    const [ showMenu, setShowMenu ] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n\r\n    //check if user is logged in and add an event listener to the the profile svg icon\r\n    useEffect(() => {\r\n        //test-console.log(\"ProfileBar loaded\");\r\n        //test-console.log(\"ProfileBar userState.loggedIn: \" + userState.loggedIn);\r\n        if ( userState.loggedIn )\r\n        {\r\n            //test-console.log(\"ProfileBar addEventListener\");\r\n            document.addEventListener('click', avatarClick);\r\n\r\n        }\r\n\r\n    }, [userState.loggedIn])\r\n\r\n\r\n\r\n\r\n\r\n    const avatarClick = (event) => {\r\n        //console.log('event.target.id:', event.target.id)\r\n\r\n        if ( event.target.id === 'profile-icon' )\r\n        {\r\n            setShowMenu(!showMenu);\r\n        }else{\r\n            setShowMenu(false);\r\n        }\r\n  \r\n    }\r\n\r\n\r\n\r\n\r\n    //used in logout buttonn to logout, remove token, and redirect to user to \"/\"\r\n    const logoutHandler = () => {\r\n        logOff();\r\n        setShowMenu(false)\r\n        history.push(\"/\");\r\n    }\r\n\r\n\r\n\r\n\r\n    const showProfileMenu = () => {\r\n        return showMenu\r\n        ?\r\n        <div className='profile-menu'>\r\n            <ul style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                textAlign: 'center'\r\n            }}>\r\n                <li style={{\r\n                    color: 'black',\r\n                    borderBottom: '1px solid black'\r\n                }}><Link to='/user/profile'>My Profile</Link></li>\r\n                <li><button style={{margin: \"0px 0px 5px 0px\"}} onClick={logoutHandler}>Logout</button></li>\r\n            </ul>\r\n        </div>\r\n        :\r\n        null\r\n    }\r\n\r\n\r\n\r\n\r\n    const showRegisterAndLogin = () => {\r\n        if (userState.loggedIn)\r\n        {//user IS logged in\r\n            return (\r\n                <>\r\n                    <li>\r\n                    <div style={{color: 'white'}}>Logged in as <span style={{color: \"orange\", textTransform: \"uppercase\", fontSize: \"20px\"}}> {userState.role}:</span> <span style={{padding: \"20px\", fontSize: \"25px\", fontWeight: \"bold\"}}>{userState.firstName} {userState.lastName}</span></div>\r\n                    </li>\r\n                    <li>\r\n                        <img style={{marginRight: \"50px\", marginLeft: \"50px\"}}\r\n                            id='profile-icon'\r\n                            style={{background: \"white\", width: \"80px\"}}\r\n                            src=\"/profile_icon.svg\" alt=\"profileIcon\"\r\n\r\n                            height='50px' \r\n                        />\r\n                    </li>\r\n                </>\r\n            )\r\n        }\r\n        else\r\n        {//user is NOT logged in\r\n            return (\r\n                <>\r\n                    <li><Link to='/register'>Register</Link></li>\r\n                    <li><Link to='/login'>Login</Link></li>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='profile-bar'>\r\n            \r\n            <ul>\r\n                {showRegisterAndLogin()}\r\n            </ul>\r\n            {userState.loggedIn && showProfileMenu()}\r\n            {userState.loggedIn && <button className=\"squareLogout\" onClick={logoutHandler}> logoout</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileBar\r\n\r\n\r\n/*The code below was used with JWT but now has been replaced with sessions for authorization access.\r\n\r\n\r\nconst ProfileBar = (props) => {\r\n\r\n\r\n\r\n    const { firstName, lastName, role, setUserData, lastLesson, setLastLesson, modulesCompleted, setModulesCompleted, isAuth, setIsAuth, loggedIn, loginStatus } = useContext(GlobalContext);\r\n    const history = useHistory();\r\n    console.log(\"ProfileBar1: loggedin: \" + loggedIn + \", firstName: \" + firstName + \", lastName: \" + \", isAuth: \" + isAuth + \", role: \" + role);\r\n    console.log(`ProfileBar2: lastLesson: ${lastLesson}, lastLesson.lessonId: ${lastLesson.lessonId}, modulesCompleted: ${modulesCompleted[0].moduleFinish}`);\r\n\r\n    //When first rendering the component it checks to see if the user has already been authenticated by checking\r\n    // if a JWT \"authToken\" is set. If so then the user is redirected to the root \"/\" home page  \r\n    useEffect(() => {\r\n\r\n        if(localStorage.getItem(\"authToken\")){\r\n            console.log(\"profile localStorage====\");\r\n            setIsAuth(true);\r\n            loginStatus(true);\r\n            \r\n            if(firstName == 'None'){\r\n                \r\n                //retrieve stored variables to set Global Context\r\n                const first = localStorage.getItem('firstName');\r\n                const last = localStorage.getItem('lastName');\r\n                const r = localStorage.getItem('role');\r\n\r\n                setUserData({firstname: first, lastname: last, role: r}, true);\r\n\r\n\r\n                const locStorLastLesson = localStorage.getItem('lastLesson');\r\n                //convert localStorage 'lastLesson' string to JSON object\r\n                const parsedJSONobj = JSON.parse(locStorLastLesson);\r\n                \r\n                setLastLesson(parsedJSONobj, true);\r\n\r\n\r\n                const locStorModCompleted = localStorage.getItem('modulesCompleted');\r\n                console.log(\"locStorModCompleted: \" + locStorModCompleted);\r\n                //convert localStorage 'modulesCompleted' string to JSON object\r\n                const parsedLocStorModCompleted = JSON.parse(locStorModCompleted);\r\n                console.log(\"parsedLocStorModCompled: \" + parsedLocStorModCompleted);\r\n\r\n                setModulesCompleted(parsedLocStorModCompleted, true);\r\n\r\n            }\r\n            \r\n\r\n        }else{\r\n            console.log(\"profilebar: --------\");\r\n            //no JWT so not logged in and set Global Context to nothing \r\n            setIsAuth(false);\r\n            loginStatus(false);\r\n            setUserData({\r\n                firstname: \"\", \r\n                lastname: \"\", \r\n                role: \"\"}, false); \r\n\r\n            setLastLesson({module: 0, lessonId: 0}, false);\r\n\r\n            setModulesCompleted([{ module: 0, lessonIds: [0], moduleFinish: false }], false);\r\n\r\n\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n    //used in logout buttonn to logout, remove token, and redirect to user to \"/login\"\r\n    const logoutHandler = () => {\r\n\r\n        localStorage.removeItem(\"authToken\");\r\n        setIsAuth(false);\r\n        loginStatus(false);\r\n\r\n        setUserData({firstname: \"\", \r\n                    lastname: \"\", \r\n                    role: \"\"}, false);\r\n\r\n        \r\n        setLastLesson({module: 0, lessonId: 0});\r\n        \r\n        setModulesCompleted([{ module: 0, lessonIds: [0], moduleFinish: false }]);\r\n        \r\n\r\n        history.push(\"/login\");\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className='profile-bar'>\r\n\r\n\r\n            <ul>\r\n                {loggedIn? <li><span style={{color: \"yellow\", padding: \"0px\", fontSize: \"1.5rem\"}}>{role} : </span></li>: <span></span>}\r\n                {isAuth ? <li><span style={{color: \"white\", padding: \"0px\", fontSize: \"2rem\"}}>{firstName} {lastName}</span></li> : <li><Link to='/register'>Register</Link></li> }\r\n                {loggedIn ? <img style={{marginLeft: \"30px\", background: \"white\", padding: \"0px\"}}src=\"/profile_icon.svg\" alt=\"profileIcon\" height='55px'/> : <li><Link to='/login'>Login</Link></li>}\r\n            </ul>\r\n\r\n            {isAuth && <button style={{background: \"white\", fontWeight: \"bold\", marginLeft: \"30px\", marginBottom: \"10px\", border: \"none\", padding: \"5px\"}} \r\n            onClick={logoutHandler}><span style={{color: \"black\"}}>Logout</span></button>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileBar\r\n\r\n\r\n*/","import React, { useState, useRef } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n//import PropTypes from 'prop-types';\r\nimport './../../App.css';\r\nimport './Assessment.css';\r\n\r\n\r\n\r\n/**This component is used to display 3 quizzes at the end of each course module. The quiz questions, choices, \r\n * answers, and explanations are fetched from the server via the Presentor parent component passed in through props. \r\n * This Assessment component is part of the parent Presentor component that presents all the \r\n * the course modules to the user. The user takes 3 quizes and has unlimited chances to get the right anwser\r\n * before moving onto the next quiz. At the end the user is then redirected to the finished component via\r\n * Presentor component.\r\n */\r\nconst Assessment = (props) => {\r\n\r\n    const [userAnswered, setUserAnswered] = useState(\"blank\");\r\n    const [showExplanation, setShowExplanation] = useState(false);\r\n    const [correct, setCorrect] = useState(\"\");\r\n    const [incorrect, setIncorrect] = useState(\"\");\r\n    const [finishedQuizzes, setFinishedQuizzes] = useState(false);\r\n    const [disableButton, setDisabledButton] = useState(false);\r\n\r\n    const [quizCount, setQuizCount] = useState(0);\r\n\r\n    const history = useHistory();\r\n    //use to keep track of the quizes the user has taken to display 'finished module' button at the end of all 3 quizzes\r\n    const quizCountRef = useRef(0);\r\n\r\n\r\n\r\n    //checks the answer of the user. The user has unlimited tries\r\n    const checkAnswer = (Event) => {\r\n        Event.preventDefault();\r\n\r\n        //test-console.log(\"userAnswered: \" + userAnswered);\r\n        //test-console.log(\"correct answer: \" + props.courseContent.quizs[quizCount].answer.values);\r\n\r\n\r\n        //if the user has chosen the correct answer show explanation else have them try again\r\n        if(userAnswered == props.courseContent.quizs[quizCount].answer.values){\r\n            setShowExplanation(true);\r\n            setCorrect(\"You are correct\");\r\n\r\n            //user has taken all the quizes and current in the last one\r\n            if(quizCountRef.current == 2){\r\n                setDisabledButton(true);\r\n                setFinishedQuizzes(true);\r\n            }\r\n            \r\n        }else{\r\n\r\n            setShowExplanation(false);\r\n            setIncorrect(\"Sorry, wrong answer. Please try again\");\r\n        }\r\n\r\n        setInterval(() => {\r\n            setCorrect(\"\");\r\n            setIncorrect(\"\");\r\n        }, 3000);\r\n    }\r\n\r\n\r\n\r\n\r\n    //moves the user to the next quiz and loads the new questions and answers data\r\n    const nextQuiz = () => {\r\n        let quizNum = quizCountRef.current + 1;\r\n        quizCountRef.current = quizNum;\r\n        setQuizCount(quizNum);\r\n\r\n        //hide last explanation\r\n        setShowExplanation(false);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //if the props has the fetched data ready load the assessment component UI ELSE show a loading text tag\r\n    if(props.courseContent !=null) \r\n    {\r\n        return(\r\n\r\n\r\n            <>\r\n            {//test-console.log(\"quizCount: \" + quizCount)\r\n            }\r\n\r\n                <div className='assessment-grid-layout'>\r\n\r\n                    <div className=\"centerContainer\">\r\n\r\n                        <h1 style={{textTransform: 'uppercase'}}>{props.courseContent.lessonType}</h1>\r\n\r\n                        <p className='questionNumber'>\r\n                            Question {props.courseContent.quizs[quizCount].number}\r\n                        </p>\r\n\r\n                        <div className='question'>\r\n                            <h3>{props.courseContent.quizs[quizCount].question}</h3>\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                        <div className='answers'>\r\n                            <ul>\r\n                                <li>\r\n                                <input type=\"radio\" className=\"inputQuiz\"\r\n                                id= {`${props.courseContent.quizs[quizCount].choices[0].cid}`} \r\n                                name=\"choiceGroup\" \r\n                                onChange={(Event) => setUserAnswered(Event.target.value)}\r\n                                value={props.courseContent.quizs[quizCount].choices[0].values}/>{props.courseContent.quizs[quizCount].choices[0].choice}\r\n                                </li>\r\n\r\n                                <li>\r\n                                <input type=\"radio\" className=\"inputQuiz\"\r\n                                id= {`${props.courseContent.quizs[quizCount].choices[1].cid}`}\r\n                                name=\"choiceGroup\" \r\n                                onChange={(Event) => setUserAnswered(Event.target.value)}\r\n                                value={props.courseContent.quizs[quizCount].choices[1].values}/>{props.courseContent.quizs[quizCount].choices[1].choice}\r\n                                </li>\r\n\r\n                                <li>\r\n                                <input type=\"radio\" className=\"inputQuiz\"\r\n                                id= {`${props.courseContent.quizs[quizCount].choices[2].cid}`}\r\n                                name=\"choiceGroup\" \r\n                                onChange={(Event) => setUserAnswered(Event.target.value)}\r\n                                value={props.courseContent.quizs[quizCount].choices[2].values}/>{props.courseContent.quizs[quizCount].choices[2].choice}\r\n                                </li>\r\n\r\n                                <li>\r\n                                <input type=\"radio\" className=\"inputQuiz\"\r\n                                id= {`${props.courseContent.quizs[quizCount].choices[3].cid}`}\r\n                                name=\"choiceGroup\"\r\n                                onChange={(Event) => setUserAnswered(Event.target.value)}\r\n                                value={props.courseContent.quizs[quizCount].choices[3].values}/>{props.courseContent.quizs[quizCount].choices[3].choice}\r\n                                </li>\r\n\r\n                                </ul>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                        {//if explanation is showing hide this button until they move onto the next quiz\r\n                        }\r\n                        <div className=\"checkanswer\" style={{display: !showExplanation ? \"block\" : \"none\"}}>\r\n                            <p>\r\n                                <span style={{ fontSize: \"35px\",color: \"red\"}}>{incorrect}</span>\r\n                                <span style={{ fontSize: \"35px\", color: 'green'}}>{correct}</span>\r\n                            </p>\r\n                            <button disabled={disableButton} onClick={checkAnswer} type=\"submit\">Check</button>\r\n\r\n                        </div>\r\n\r\n\r\n                        <br/>\r\n\r\n                        {//hide this explanation div unless the user answered correctly and now can move onto the next quiz\r\n                        //finished the module with all 3 quizzes correct and move onto the Finished component\r\n                        }\r\n                        <div style={{display: showExplanation ? \"block\" : \"none\"}}>\r\n                            <hr/>\r\n\r\n                            <span ><h1 style={{color: \"green\"}}>{props.courseContent.quizs[quizCount].explanation}</h1></span>\r\n\r\n                            <hr/>\r\n                        \r\n                            <button style={{display: !finishedQuizzes ? \"block\" : \"none\"}}onClick={nextQuiz}>Next Quiz</button>\r\n\r\n                            <br/>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n                        {//this is only displayed if the user has taken all 3 quizzes\r\n                        }\r\n                        <div className=\"finshedContainer\" style={{display: finishedQuizzes ? \"flex\" : \"none\"}}>\r\n                            \r\n                            <button style={{backgroundColor: \"green\"}} onClick={props.nextLesson}>Finished Module Lessons</button>\r\n                    \r\n                        </div> \r\n\r\n\r\n                        <button onClick={props.previousLesson}>Previous Lesson</button>\r\n\r\n                        <br/>\r\n                        \r\n                    </div>\r\n                   \r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n            <>\r\n                <h3>Loading.......assessment</h3>\r\n            </>\r\n    );\r\n\r\n}\r\n\r\nexport default Assessment;","import React, {useState } from 'react';\r\nimport { useHistory} from 'react-router-dom';\r\nimport './AddContent.css';\r\n\r\nconst AddContent = () => {\r\n    const history = useHistory();\r\n\r\n    const navigateTo = () =>\r\n    {\r\n        history.push('/Admin')\r\n    };\r\n\r\n    const [formData, setFormData]=useState({ EnterATitle: ''})\r\n\r\n    const {EnterATitle} = formData;\r\n\r\n    const onChange = e => setFormData({...formData, [e.target.name]: e.target.value});\r\n\r\n\treturn (\r\n        <div className='add-content-grid-layout'>\r\n\r\n            <form className='form'>\r\n\r\n                <h1 className=\"large\">Enter A Title:</h1>\r\n                <div className = 'form-group'>\r\n                    <input \r\n                        type = 'text'\r\n                        class=\"form-control\"\r\n                        placeholder = 'Enter A Title'\r\n                        name = 'Title'\r\n                        defaultValue= {EnterATitle}\r\n                        onChange = {e=> onChange(e)}\r\n                        maxLength = '40'\r\n                        required\r\n                    />\r\n                </div>\r\n\r\n                <h1 className=\"large\">Enter description:</h1>\r\n                <div className = 'form-group'>\r\n                    <textarea \r\n                        type = 'textbox' cols=\"10\" rows=\"3\"\r\n                        class=\"form-control\"\r\n                        placeholder = 'Enter A Description'\r\n                        name = 'description'\r\n                        maxLength=\"25\"\r\n                        defaultValue= {EnterATitle}\r\n                        onChange = {e=> onChange(e)}\r\n                        required\r\n                    />\r\n                </div>\r\n            \r\n                <h1 className=\"large\">Lesson Id:</h1>\r\n                <div className = 'form-group'>\r\n                    <input \r\n                        type = 'text'\r\n                        class=\"form-control\"\r\n                        placeholder = 'Id number'\r\n                        name = 'lessonId'\r\n                        defaultValue= {EnterATitle}\r\n                        onChange = {e=> onChange(e)}\r\n                        maxLength = '10'\r\n                        required\r\n                    />\r\n                </div>\r\n\r\n                <h1 className=\"large\">Enter Step Position:</h1>\r\n                <div className = 'form-group'>\r\n                    <input \r\n                        type = 'text'\r\n                        class=\"form-control\"\r\n                        placeholder = 'Enter A Title'\r\n                        name = 'stepPosition'\r\n                        defaultValue= {EnterATitle}\r\n                        onChange = {e=> onChange(e)}\r\n                        maxLength = '10'\r\n                        required\r\n                    />\r\n                </div>\r\n\r\n                \r\n\r\n\r\n                <div style = {{position: 'absolute', top: '145px', right: '30px'}}> \r\n                    <button onClick={navigateTo}>Save/Exit</button>\r\n                </div>\r\n\r\n\r\n\r\n                <div className='outsideborder'>  \r\n\r\n                    <div className=\"addcontentbox\">\r\n                        <p>Add Video</p>\r\n                    </div>\r\n\r\n                    <div className=\"addcontentbox\">\r\n                        <p>Add VoiceOver</p>\r\n                    </div>\r\n                    \r\n                    <div className=\"addcontentbox\">\r\n                        <p>Add Quiz</p>\r\n                    </div>\r\n\r\n\r\n                </div>\t\r\n            </form>\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default AddContent; ","import axios from 'axios';\r\n\r\n\r\n\r\n\r\n/**This component is used to send Email from the ContactUs.js component. It is a public service that so\r\n * the people don't have to be logged in to contact us. It uses the SendGrid API and service for email\r\n * forwarding\r\n */\r\nexport const sendContactUsEmail = async ({email, subject, message, config}) => {\r\n\r\n\r\n    try{\r\n\r\n        const config = {\r\n            header: {\"Content-Type\": \"application/json\"}\r\n        }\r\n\r\n        const serverResponse = await axios.post(\"/api/public/contactus\", {email, subject, message, config});\r\n\r\n        return serverResponse.data\r\n\r\n    }catch(error){\r\n\r\n        return error.response.data.error;\r\n\r\n    }\r\n\r\n}","import \"./ContactUs.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { sendContactUsEmail } from '../../services/publicService';\r\nimport { useAuth } from '../../context/AuthProvider'\r\n\r\n\r\n\r\n\r\n\r\n/**This component is used to have people or users email the customer service or contact us via email.\r\n * It is a public component and users don't have to be registered to use it. For email to take \r\n * place it uses the /services/publicService component. This uses sendGrid.com API\r\n */\r\nconst ContactUs = () => {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [subject, setSubject] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n\r\n    //check if the user is logged in upon component mount/render\r\n    const { userState } = useAuth()\r\n    useEffect(() => {\r\n        if ( userState.loggedIn )\r\n        {\r\n            setEmail(userState.email)\r\n        } \r\n    },[])\r\n\r\n\r\n    //send the mail to the user via the sendContactUsEmail PublicService component\r\n    const contactUsHandler = async (Event) => {\r\n        Event.preventDefault();\r\n\r\n        //test-console.log(email);\r\n\r\n        //configuration file for Axios to set a header line content type to application/json\r\n        const config = {\r\n            header: {\"Content-Type\": \"application/json\" }\r\n        }\r\n\r\n        //try to send emailt, subject, and message to node server via Axios\r\n        try {\r\n            const {data} = await sendContactUsEmail({email, subject, message})\r\n\r\n            setSuccessMessage(data.message);\r\n\r\n\r\n        } catch (error) {\r\n            //show error in the form\r\n            setErrorMessage(error.response.data.error);\r\n            //clear the email text box\r\n            //setEmail(\"\");\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        \r\n        <div className=\"contactContainer\" stye={{background: \"yellow\"}}>\r\n\r\n            <div className=\"leftSide\"></div>\r\n            <div className=\"rightSide\"></div>\r\n\r\n            <div className=\"contactForm\">\r\n\r\n                <br/>\r\n                \r\n                <center>\r\n                <h1>Contact Us</h1>\r\n                </center>\r\n\r\n                <form className=\"form\" onSubmit={contactUsHandler}>\r\n\r\n                    <div className='form-group'>\r\n                        \r\n                        <label htmlFor=\"email\"><h2>Your Email:</h2></label>\r\n\r\n                        <center>\r\n                        <input className=\"contactFormInput\" type=\"text\" required id=\"email\" placeholder=\"Enter Your Email\" \r\n                            value={email} onChange={(Event) => setEmail(Event.target.value)} />\r\n                        </center>\r\n\r\n                    </div>\r\n\r\n\r\n                    <div className='form-group'>\r\n                        \r\n                        <label htmlFor=\"subject\"><h2>Subject</h2></label>\r\n\r\n                        <center>\r\n                        <input className=\"contactFormInput\" type=\"text\" required id=\"subject\" placeholder=\"Enter Subject\" \r\n                            value={subject} onChange={(Event) => setSubject(Event.target.value)} />\r\n                        </center>\r\n\r\n                    </div>\r\n\r\n\r\n                    <div className='form-group'>\r\n                        \r\n                        <label htmlFor=\"message\"><h2>Message</h2></label>\r\n                        <textarea className=\"contactFormInput contactusTextarea\" cols='80' rows='10' type=\"text\" required id=\"message\" placeholder=\"Enter Your Message\" \r\n                            value={message} onChange={(Event) => setMessage(Event.target.value)} />\r\n\r\n                    </div>\r\n\r\n                    <br/>\r\n\r\n                    <button type=\"submit\">Send Email</button>\r\n\r\n\r\n                    <br/>\r\n                    {errorMessage && <p>Error: {errorMessage}</p>}\r\n                    {successMessage && <p>{successMessage}</p>}\r\n\r\n                </form>\r\n\r\n                \r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\nexport default ContactUs;\r\n\r\n\r\n","export const videoData = [\n    {\n        id: 1,\n        title: \"How to walk\",\n        instructor: \"Jon Smith\",\n        overview: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque ut tristique lectus, sit amet gravida urna. Nunc id lorem ut enim faucibus tincidunt. Maecenas varius sapien ut turpis mattis accumsan. Proin vehicula aliquet dui nec venenatis. Donec laoreet ex ut erat elementum, id dictum dolor lacinia. Nunc dapibus tortor ac tellus finibus, sit amet mattis purus tincidunt. Aliquam convallis venenatis quam, non consectetur sapien laoreet sed. Donec efficitur ipsum in velit ullamcorper suscipit. Nunc urna quam, tincidunt consectetur tortor a, accumsan sodales metus. Nulla aliquam, risus id laoreet vulputate, nibh arcu tempor dolor, et aliquam lorem justo sit amet nisl.\",\n        price: 88.88,\n        group_limit: 200,\n        video_src: 'https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4',\n        thumbnail_src: 'https://soliloquywp.com/wp-content/uploads/2016/03/thumbnails_addon.png',\n        instructor_avatar: 'https://i.pinimg.com/474x/ee/19/5a/ee195a69bf404996e8b6030fb861e4ed.jpg'\n    },\n    {\n        id: 2,\n        title: \"Playing on the playground\",\n        instructor: \"Oprah Ritprasert\",\n        overview: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque ut tristique lectus, sit amet gravida urna. Nunc id lorem ut enim faucibus tincidunt. Maecenas varius sapien ut turpis mattis accumsan. Proin vehicula aliquet dui nec venenatis. Donec laoreet ex ut erat elementum, id dictum dolor lacinia. Nunc dapibus tortor ac tellus finibus, sit amet mattis purus tincidunt. Aliquam convallis venenatis quam, non consectetur sapien laoreet sed. Donec efficitur ipsum in velit ullamcorper suscipit. Nunc urna quam, tincidunt consectetur tortor a, accumsan sodales metus. Nulla aliquam, risus id laoreet vulputate, nibh arcu tempor dolor, et aliquam lorem justo sit amet nisl.\",\n        price: 200.88,\n        group_limit: 100,\n        video_src: 'https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4',\n    },\n    {\n        id: 3,\n        title: \"How to walk\",\n        instructor: \"Jon Smith\",\n        overview: \"Lorem ipsum dolor sit amet, et aliquam lorem justo sit amet nisl.\",\n        price: 88.88,\n        group_limit: 200,\n        video_src: 'https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4',\n        thumbnail_src: 'https://soliloquywp.com/wp-content/uploads/2016/03/thumbnails_addon.png',\n        instructor_avatar: 'https://thumbs.dreamstime.com/b/young-man-profile-face-over-gray-background-79495081.jpg'\n    },\n    {\n        id: 4,\n        title: \"How to walk\",\n        instructor: \"Jon Smith\",\n        overview: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque ut tristique lectus, sit amet gravida urna. Nunc id lorem ut enim faucibus tincidunt. Maecenas varius sapien ut turpis mattis accumsan. Proin vehicula aliquet dui nec venenatis. Donec laoreet ex ut erat elementum, id dictum dolor lacinia. Nunc dapibus tortor ac tellus finibus, sit amet mattis purus tincidunt. Aliquam convallis venenatis quam, non consectetur sapien laoreet sed. Donec efficitur ipsum in velit ullamcorper suscipit. Nunc urna quam, tincidunt consectetur tortor a, accumsan sodales metus. Nulla aliquam, risus id laoreet vulputate, nibh arcu tempor dolor, et aliquam lorem justo sit amet nisl.\",\n        price: 88.88,\n        group_limit: 200,\n        video_src: 'https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4',\n    },\n    {\n        id: 5,\n        title: \"How to walk\",\n        instructor: \"Jon Smith\",\n        overview: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque ut tristique lectus, sit amet gravida urna. Nunc id lorem ut enim faucibus tincidunt. Maecenas varius sapien ut turpis mattis accumsan. Proin vehicula aliquet dui nec venenatis. Donec laoreet ex ut erat elementum, id dictum dolor lacinia. Nunc dapibus tortor ac tellus finibus, sit amet mattis purus tincidunt. Aliquam convallis venenatis quam, non consectetur sapien laoreet sed. Donec efficitur ipsum in velit ullamcorper suscipit. Nunc urna quam, tincidunt consectetur tortor a, accumsan sodales metus. Nulla aliquam, risus id laoreet vulputate, nibh arcu tempor dolor, et aliquam lorem justo sit amet nisl.\",\n        price: 88.88,\n        group_limit: 200,\n        video_src: 'https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4',\n    },\n];\n","import { useHistory } from 'react-router-dom';\nimport {videoData} from './trainingData';\n\nimport './TrainingVideos.css';\n\nconst TrainingVideos = () => {\n    const history = useHistory();\n    console.log(history);\n\treturn (\n        <div className='training-videos-grid-layout'>\n            <div className='flex-col'>\n                {videoData.map((value) => {\n                    let default_thumbnail = 'https://thumbs.dreamstime.com/b/no-thumbnail-image-placeholder-forums-blogs-websites-148010362.jpg';\n                    let default_instructor_avatar = 'https://www.w3schools.com/howto/img_avatar.png';\n\n                    return <div key={value.id} className='flex-row' style={{cursor: 'pointer'}} onClick={() => history.push('/traininginfo/' + value.id)}>\n                        <div className=\"inner-row-white\">\n                            <div className=\"inner-row-container left\">\n                                <div className='thumbnail'>\n                                    <img style={{'borderRadius': '10px'}} width='300' height='260' src={value.thumbnail_src ? value.thumbnail_src : default_thumbnail} />\n                                </div>\n                            </div>\n\n                            <div className='inner-row-container right'>\n                                <div className='inner-details'>\n                                    <h2>{value.title}</h2>\n                                    <div className=\"instructor\">\n                                        <img style={{'borderRadius': '20px'}} width=\"30\" height=\"30\"  src={value.instructor_avatar ? value.instructor_avatar : default_instructor_avatar} />\n                                        &nbsp;&nbsp;<span>Instructor {value.instructor}</span>\n                                    </div>\n                                    <h3>Short Overview</h3>\n                                    <p className='overview'>{value.overview}</p>\n                                </div>\n\n\n                                <div className='details-footer'>\n                                    <span>Group Limit: {value.group_limit}</span>\n                                    <span>Price: ${value.price}</span>\n\n\n                                </div>\n\n                            </div>\n                        </div>\n\n                    </div>;\n                })}\n            </div>\n        </div>\n\t);\n}\n\nexport default TrainingVideos;\n","import React, { useState, useEffect } from 'react';\nimport { videoData } from '../trainingvideos/trainingData';\n\nimport './TrainingVideoView.css';\n\nconst TrainingVideoView = (props) => {\n    const [trainingVideo, setTrainingVideo] = useState(null);\n    let trainingVideoId = props.match.params.trainingVideoId;\n    let default_thumbnail = 'https://thumbs.dreamstime.com/b/no-thumbnail-image-placeholder-forums-blogs-websites-148010362.jpg';\n    let default_instructor_avatar = 'https://www.w3schools.com/howto/img_avatar.png';\n\n    useEffect(() => {\n        let tv = videoData.find(v => v.id == trainingVideoId);\n        if (tv != null) {\n            setTrainingVideo(tv);\n            console.log(trainingVideo);\n        }\n    });\n\n\n\n\treturn (\n        <div className='training-video-grid-layout'>\n            <div className='outer-container'>\n                {\n                    trainingVideo == null ? <p style={{'textAlign': 'center', 'marginTop': '50px'}}>Invalid Training Video</p> :\n                        (<div className=\"inner-container\">\n\n                            <div className=\"innerHalf left videoPreview\">\n                                <img style={{'borderRadius': '10px'}} width='350' height='350' src={trainingVideo.thumbnail_src ? trainingVideo.thumbnail_src : default_thumbnail} />\n\n                            </div>\n                            <div className=\"innerHalf right secondary-info\">\n                                <h2>{trainingVideo.title}</h2>\n                                <div className=\"instructor-group\">\n                                    <span className=\"video-text-gap\"><img style={{'borderRadius': '20px'}} width=\"30\" height=\"30\"  src={trainingVideo.instructor_avatar ? trainingVideo.instructor_avatar : default_instructor_avatar} /></span>\n                                    <span className=\"video-text-gap instructor-text\">Instructor {trainingVideo.instructor}</span>\n                                </div>\n                                <div className=\"price-group\">\n                                    <span className=\"video-text-gap\">Group Limit: {trainingVideo.group_limit}</span>\n                                </div>\n                                <div className=\"description\">\n                                    <p>\n                                        {trainingVideo.overview}\n                                    </p>\n                                </div>\n                                <div className=\"buy-container\">\n                                    <span>${trainingVideo.price}</span><button>Buy</button>\n                                </div>\n\n                            </div>\n\n                        </div>)\n                }\n            </div>\n        </div>\n\t);\n}\n\nexport default TrainingVideoView;\n","import './auth.css'\r\nimport {useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n/**This component is used to send an email to the users email account with a link that takes them to \r\n* the Resetpassword component/page to reset their password.\r\n*/\r\nconst ForgotPasswordScreen = ( { history } ) => {\r\n\r\n    //state functions to set state variables\r\n    const [email, setEmail] = useState(\"\");\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n\r\n    //form submit handler used in to send email to node server for password retrieval\r\n    const forgotPasswordHandler = async (Event) => {\r\n        Event.preventDefault();\r\n\r\n        //configuration file for Axios to set a header line content type to application/json\r\n        const config = {\r\n            header: {\"Content-Type\": \"application/json\" }\r\n        }\r\n\r\n        //try to send email to node server via Axios\r\n        try {\r\n            const {data} = await axios.post(\"/api/auth/forgotpassword\", {email}, config);\r\n\r\n            setSuccessMessage(data.message + \" \");\r\n\r\n\r\n        } catch (error) {\r\n            //show error in the form\r\n            setErrorMessage(error.response.data.error);\r\n            //clear the email text box\r\n            setEmail(\"\");\r\n            //Set the error message to empty in 5 sec\r\n            setTimeout(() => {\r\n                setErrorMessage(\"\");\r\n            },\r\n            5000);\r\n        }\r\n\r\n    }//registerHandler\r\n\r\n\r\n\r\n    \r\n\r\n    return(\r\n        <div className='forgot-password-grid-layout backColorOrange'>\r\n\r\n            <div className=\"centerFormContainer\">\r\n\r\n                <form className ='form' onSubmit={forgotPasswordHandler}>\r\n\r\n                    <label htmlFor=\"email\"><h1>Forgot your Password?</h1></label>\r\n\r\n                    <span className=\"marginTen\">Please enter the email you registered with</span>\r\n\r\n                        <center> \r\n                        <input className=\"formInput\"\r\n                            type=\"text\" \r\n                            required id=\"email\" \r\n                            placeholder=\"Enter Password\" \r\n                            value={email} \r\n                            onChange={(Event) => setEmail(Event.target.value)} />  \r\n                        </center>   \r\n\r\n                        \r\n                    <div className='form-group'>     \r\n                        <button className=\"buttonLogin\" type=\"submit\"><h2>Reset</h2></button>\r\n                    </div>\r\n\r\n                    <br/>\r\n                    <span style={{color: 'red'}}>{errorMessage}</span> \r\n                    <br/>\r\n                    {errorMessage && <span>you have an error</span>}\r\n                    <br/>\r\n                    {successMessage && <span>{successMessage}</span>}\r\n                    <br/>\r\n                    <span>{successMessage ? \"Email has been sent \": \"\"}</span>\r\n                    <br/>\r\n                    <span >Don't have an account? <Link to=\"/register\">Register</Link></span>   \r\n\r\n                </form>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ForgotPasswordScreen\r\n\r\n","import './auth.css';\r\nimport {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n\r\n/**This component is used to reset the user password. This page/component is accessed through a link sent by an email.\r\n * The email link has a JWT that is generated when the user resets his password via the ForgotPassword component.\r\n * The JWT is generated on the server and is then authenticated and sent back in URL parameter.\r\n * The user enters a new password and confirms it. It must be 8 characters or more and match. The password is \r\n * send to the server backend. A button appears that the user can click to redirect to \"/login\" \r\n */\r\nconst ResetPasswordScreen = ( { history, match } ) => {\r\n\r\n    //state functions to set state variables\r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirmpassword, setComfirmPassword] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [success, setSuccess] = useState(false);\r\n    const [disableEnableInput, setDisableEnableInput] = useState(false);\r\n\r\n\r\n    //remove any token set and redirect to \"/login\"\r\n    const logoutHandler = () => {\r\n        localStorage.removeItem(\"authToken\");\r\n        history.push(\"/login\");\r\n    }\r\n\r\n    //form submit handler to set and send email, password to node server for authentication\r\n    const resetPasswordHandler = async (Event) => {\r\n        Event.preventDefault();\r\n\r\n        //configuration file for Axios to set a header line content type to application/json\r\n        const config = {\r\n            header: {\"Content-Type\": \"application/json\" }\r\n        }\r\n\r\n        //make sure the passwords match or set error message and reset in 5 sec\r\n        if(password != confirmpassword) {\r\n            setPassword(\"\");\r\n            setComfirmPassword(\"\");\r\n            setTimeout(() => {\r\n                setErrorMessage(\"\");\r\n            }, 5000);\r\n\r\n            return setErrorMessage(\"Enter a password that matches\");\r\n        }\r\n\r\n        //try to send register data to node server via Axios\r\n        try {\r\n            const serverData = await axios.put(\r\n                `/api/auth/resetpassword/${match.params.resetToken}`, {password}, config);\r\n\r\n            //test-console.log(serverData);\r\n            \r\n            //set input text boxes to blank\r\n            setPassword(\"\");\r\n            setComfirmPassword(\"\");\r\n\r\n            //set response lines in the page\r\n            setSuccess(serverData.data.success);\r\n            setDisableEnableInput(serverData.data.success);\r\n\r\n\r\n        } catch (error) {\r\n            //show the error i the page\r\n            setErrorMessage(error.response.data.error);\r\n\r\n            //Set the error message to empty in 5 sec\r\n            setTimeout(() => {\r\n                setErrorMessage(\"\");\r\n            },\r\n            5000);\r\n        }\r\n\r\n    }//resetPasswordHandler\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"grid-layout backColorOrange\">\r\n\r\n            <div className=\"centerFormContainer\">\r\n        \r\n                \r\n\r\n                <form onSubmit={resetPasswordHandler}>\r\n\r\n                    <label><h1>Reset Password Screen</h1></label>\r\n\r\n                    <div className='form-group'>  \r\n                        <label htmlFor=\"password\"><h2>New Password:</h2></label>\r\n                        <input type=\"password\" required id=\"password\" placeholder=\"Enter Password\" \r\n                        disabled={disableEnableInput} value={password} onChange={(Event) => setPassword(Event.target.value)} />  \r\n                    </div>\r\n\r\n                    <div className='form-group'>  \r\n                        <label htmlFor=\"comfirmpassword\"><h2>Confirm Password:</h2></label>\r\n                        <input type=\"password\" required id=\"comfirmpassword\" placeholder=\"Comfirm Password\" \r\n                        disabled={disableEnableInput} value={confirmpassword} onChange={(Event) => setComfirmPassword(Event.target.value)} />  \r\n                    </div>\r\n\r\n                    <br/>\r\n                        \r\n                    <div className=\"button-holder\">\r\n                        <button  type=\"submit\">Reset Password</button>\r\n                    </div>\r\n\r\n                    <br/>\r\n                    <span style={{color: 'red'}}>{errorMessage}</span> \r\n\r\n                    {success && (<><span>Return to </span><button onClick={logoutHandler}>Login</button></>)}\r\n\r\n                    <br/>\r\n\r\n                    <span>Don't have an account? <Link to=\"/register\">Register</Link></span>\r\n                    \r\n                </form>\r\n\r\n            </div>\r\n          \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ResetPasswordScreen\r\n\r\n","import './Card.css';\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n\r\n/**This component is used to display the modules of the course and user progress in a card format. \r\n * It is used in the Userdashboard's child component UserDashMain. It gets its data via the props from\r\n * the UserDashMain. Each course module is represented with one card.\r\n */\r\nconst Card = ({ module, title, description, lessonIds, lastLesson, modulesCompleted }) => {\r\n\r\n    const [startModule, setStartModule] = useState(false);\r\n    const [completedModule, setCompletedModule] = useState(false);\r\n    const [inprogressModule, setInprogressModule] = useState(false);\r\n    const [nextModule, setNextModule] = useState(true);\r\n    const [progressPercent, setProgressPercent] = useState(0)\r\n\r\n\r\n    //when module first mounts check for modules status of user by running the function\r\n    useEffect(() => {\r\n        \r\n        checkModuleUserStatus();\r\n\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    //to see the status of each module for the user whether they have completed, inprogress, or yet to take next\r\n    const checkModuleUserStatus = () => {\r\n\r\n        modulesCompleted.forEach( userModCompleted => {\r\n            /*test-to get the progress bar to work by finding variables and setting percentages\r\n            console.log(userModCompleted);\r\n            console.log(\"modulesCompleted userModCompleted: \" + userModCompleted.lessonIds + \" length: \" + userModCompleted.lessonIds.length);\r\n            console.log(\"mod.module:\" + module + \" lessonIds: \" + lessonIds + \" lenght: \" + lessonIds.length);\r\n            console.log(Math.round(((userModCompleted.lessonIds.length)/lessonIds.length) * 100));\r\n            */\r\n            \r\n            if(userModCompleted.module == module){\r\n\r\n                let progressPercent = Math.round(((userModCompleted.lessonIds.length - 1)/lessonIds.length) * 100);\r\n\r\n                setProgressPercent(progressPercent);\r\n\r\n                console.log(\"MATCH \" + userModCompleted.moduleFinish);\r\n                if(userModCompleted.moduleFinish){\r\n\r\n                    setCompletedModule(true);\r\n                    setNextModule(false);\r\n                    setStartModule(false);\r\n\r\n                }else if(userModCompleted.lessonIds[0] == 0){\r\n                    \r\n                    setCompletedModule(false);\r\n                    setNextModule(false);\r\n                    setStartModule(true);\r\n                    \r\n                }else{\r\n\r\n                    setInprogressModule(true);\r\n                    setNextModule(false);\r\n                    setStartModule(false);\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\nreturn(\r\n    <div className=\"cardContainer\">\r\n        \r\n\r\n        <div className=\"cardTitle\">\r\n            <h2>Module {module}</h2>\r\n            \r\n            <h4>{title}</h4>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"cardDescription\">\r\n            <p>{description}</p>\r\n            \r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"progressBox\">\r\n            <p>Progress Bar</p>\r\n            <progress value={progressPercent} max=\"100\"/>    \r\n\r\n        </div>\r\n\r\n\r\n            \r\n        <div className=\"completedBox\" className={nextModule ? 'bgRed': startModule ? 'bgGreen' : completedModule ? 'bgLightskyblue' : 'bgYellow'} >\r\n\r\n            {startModule && <span style={{color: \"green\"}}><h3>status: Start</h3></span>}\r\n            {completedModule && <span style={{color: \"lightskyblue\"}}><h3>status: Completed</h3></span>}\r\n            {inprogressModule && <span style={{color: \"yellow\"}}><h3>status: In Progress</h3></span>}\r\n            {nextModule && <span style={{color: \"red\"}}><h3>status: Next</h3></span>}\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <div className=\"card-btn\">\r\n\r\n            {completedModule && <button><Link to={ \r\n                {\r\n                    pathname : \"/presentor\", \r\n                    state: {\r\n                        module: module\r\n                    }\r\n            } \r\n                }>Click to Restart</Link></button>}\r\n\r\n\r\n\r\n           \r\n            {inprogressModule && <button><Link to={ \r\n                {\r\n                    pathname : \"/presentor\", \r\n                    state: {\r\n                        lastLesson: lastLesson\r\n                    }\r\n            } \r\n                }>Click HERE to Continue</Link></button>}\r\n\r\n\r\n            {startModule && <button><Link to={ \r\n                {\r\n                    pathname : \"/presentor\", \r\n                    state: {\r\n                        module: module\r\n                    }\r\n            } \r\n                }><h2>Click HERE to Start</h2></Link></button>}\r\n\r\n\r\n\r\n            \r\n            {nextModule && <button><a >Not Available</a></button>}\r\n                \r\n        </div>\r\n\r\n    </div>\r\n\r\n);\r\n\r\n\r\n}\r\n\r\n\r\nexport default Card;\r\n","import './Userdashboard.css';\r\nimport Card from './../card/Card'\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**This component is used to show the coursework modules in a card format. The data is sent via props from\r\n * the parent Userdashboard component.\r\n */\r\nconst UserDashMain = ({ loginStatus, lastLesson, modulesCompleted }) => {\r\n\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [courseModules, setCourseModules] = useState([]);\r\n    const [isAuth, setIsAuth] = useState(false);\r\n\r\n\r\n\r\n    //As soon as the component loads get the Course from the backend\r\n    useEffect(() => {\r\n        getCourse();\r\n        //test-console.log(\"UserDashMain loaded\");\r\n\r\n    }, [] );\r\n\r\n\r\n\r\n    //Get the Course from mongodb. The general modules to be displayed on the userdashboard main section\r\n    const getCourse = async () => {\r\n\r\n        //configuration file for Axios to set a header line content type to application/json\r\n        const config = {\r\n            header: { \"Content-Type\": \"application/json\" }\r\n        }\r\n\r\n        try {\r\n\r\n            //Get all the general coursework module description from mongodb via the server\r\n            const serverData = await axios.get(\"/api/auth/coursework/course\", config);\r\n\r\n            setCourseModules(serverData.data.course);\r\n             console.log(\"The serverData: \" + JSON.stringify(serverData.data.course));\r\n            \r\n            setIsAuth(loginStatus);\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.log(\"This is the ERROR: \" + error);\r\n            console.log(\"This is the error message: \" + error.response.data.message)\r\n            setErrorMessage(error.response.data.error);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    //render the UI component if the props has the course module fetched from the server via the Userdashboard parent\r\n    //component. If not show a loading text tag\r\n    if(modulesCompleted !=null)\r\n    { \r\n        return(\r\n            <div className=\"userDashMainContainer\">\r\n                \r\n                {isAuth && courseModules.map((mod) => {\r\n\r\n                    return (\r\n                        <div>\r\n\r\n                            <Card \r\n                            key={mod.moduleId}\r\n                            module={mod.module}\r\n                            title={mod.title} \r\n                            description={mod.description}\r\n                            lessonIds={mod.lessonIds}\r\n                            lastLesson={lastLesson}\r\n                            \r\n                            modulesCompleted={modulesCompleted}\r\n                            />\r\n\r\n                        </div>\r\n\r\n                    );})}\r\n                {!loginStatus && <span>You are not logged in. Please log in.</span>}\r\n\r\n                <br/> \r\n\r\n                <span style={{color: \"red\"}}>{errorMessage}</span>\r\n                {errorMessage && <span>you have an error: {errorMessage}</span>}\r\n            </div>\r\n\r\n        );\r\n    \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>Loading.......</h3>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default UserDashMain;\r\n","import './Userdashboard.css'\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport UserDashMain from './UserDashMain';\r\nimport { useAuth } from '../../context/AuthProvider';\r\n\r\n//$*import { GlobalContext } from '../../context/GlobalState';\r\nimport UserDashNavbar from './UserDashNavbar';//not used in this parent component\r\nimport Sidebar from './Sidebar';//not used in this parent component\r\n//comment code with $* was used with JWT but now the app uses express-sessions so no longer needed\r\n\r\n\r\n\r\n\r\n\r\n/**This component is used to as the user's dashboard. They are redirect to this component by the login. \r\n * The shows all the coursework modules that the user can take. It fetches them from the server and is displayed\r\n * in a card format inside the child component UserDashMain. It implemented a sidebar and userdashboard menu\r\n * but is taken out and no longer used.\r\n */\r\nconst Userdashboard = () => {\r\n\r\n    const [loginStatus, setLoginStatus] = useState(false);\r\n\r\n    const [sidebarOpen, setSidebarOpen] = useState(false);\r\n\r\n    const { loggedIn, lastLesson, modulesCompleted, userState } = useAuth();//useContext(GlobalContext);\r\n\r\n    const history = useHistory();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        //test-console.log(\"Userdashboard loaded\");\r\n\r\n        if(!userState.loggedIn){\r\n            history.push('/login');\r\n        }\r\n\r\n        //test-console.log(\"Userdashboard modulesCompleted: \" + JSON.stringify(modulesCompleted));\r\n\r\n        //$*if(localStorage.getItem(\"authToken\")){\r\n        //$*    setLoginStatus(true);\r\n        //$*}\r\n\r\n\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    const openSidebar = () => {\r\n        setSidebarOpen(true);\r\n        console.log(true);\r\n    }\r\n    const closeSidebar = () => {\r\n        setSidebarOpen(false);\r\n        console.log(false);\r\n    }\r\n\r\n    //$*<UserDashNavbar sideBarOpen={sidebarOpen} openSidebar={openSidebar}/>\r\n            \r\n    //$*<Sidebar sideBarOpen={sidebarOpen} closeSidebar={closeSidebar}/>\r\n\r\n    return(  \r\n\r\n        <div className=\"dashContainer\">\r\n       \r\n            <UserDashMain loginStatus={loggedIn} lastLesson={lastLesson} modulesCompleted={modulesCompleted}/>\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Userdashboard;","\r\n\r\n\r\n/**This component is rendered if a URL doesn't have a routes in the App.js \r\n */\r\nconst PageNotFound = () => {\r\n\r\n\r\n\r\n\r\nreturn(\r\n\r\n    <div>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <h1>Page Not Found</h1>\r\n        <br/>\r\n        <h3 style={{color: 'red'}}>Error: 404 - page doesn't exist</h3>\r\n\r\n    </div>\r\n    \r\n);\r\n\r\n}\r\n\r\n\r\nexport default PageNotFound;","import {useState, useEffect} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './../../App.css';\r\n\r\n\r\n\r\n/**This component was used for testing of localStorage, JSON web tokens, Protected Routes\r\n * and checking login authorization\r\n */\r\nconst HomeTestpage = ({ history }) => {\r\n\r\n    const [showPrivateDashboard, setShowPrivateDashboardLink] = useState(false);\r\n    const [loggedIn, setLogin] = useState(\r\n        //return True is \"authToken\" is set and set string \"Logged In\" else show \"Logged Out\"\r\n        localStorage.getItem(\"authToken\") ? \"Logged In\" : \"Logged Out\"\r\n    );\r\n\r\n    //test-console.log(\"The Homepage localStorage authToken is: \" + localStorage.getItem(\"authToken\"));\r\n    \r\n    //On first render of this component check to see if the \"authToken\" is set and show Dashboard link.\r\n    useEffect(() => {\r\n\r\n        if(localStorage.getItem(\"authToken\")){\r\n            setShowPrivateDashboardLink(true);    \r\n        }\r\n\r\n    } , [showPrivateDashboard]);\r\n\r\n    \r\n\r\n    return(\r\n        <div>\r\n           \r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <h1>Home page</h1>\r\n            <p><span>{loggedIn}</span></p>\r\n\r\n            {showPrivateDashboard && <Link to=\"/privatescreen\">Private Screen Dashboard</Link>}\r\n            <br/>\r\n\r\n            <section className='sample-pane'>\r\n                Sample Panes\r\n                <div id=\"bigBlock\">\r\n                    <p>Content can go in here. For example all of the pictures description an other advertising or\r\n                        information material \r\n                    </p>\r\n                </div>\r\n            </section>\r\n            <footer>\r\n                <h1>Contact Us</h1>\r\n                <h3>(888) 888-888</h3>\r\n                <h3>info@k12assessment.com</h3>\r\n            </footer>\r\n\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default HomeTestpage;","import {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport './../../App.css';\r\n\r\n\r\n\r\n\r\n/**This component was used for testing of localStorage, JSON web tokens, Protected Routes\r\n * and checking login authorization. It was also used for formating CSS and other tests\r\n */\r\nconst PrivateScreen = ({history}) => {\r\n\r\n    const [errorMessage2, setErrorMessage2] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [serverError, setServerError] = useState(false);\r\n    const [privateData, setPrivateData] = useState(\"\");\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(!localStorage.getItem(\"authToken\")){\r\n            history.push('/login');\r\n        }\r\n\r\n        //test-console.log(\"0.Before serverData = async () => {\");\r\n\r\n        const serverData = async () => {\r\n\r\n            //configuration headers for Axios. Authoriztion Bearer line is used to show that a \"authToken\" is present\r\n            //so the user has access to the data that it is requesting from the server. The JWT is sent along\r\n            //in the header so it can be verified.\r\n            const config = {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": `Bearer ${localStorage.getItem(\"authToken\")}`,\r\n                },\r\n                \r\n            };\r\n            //test-console.log(localStorage.getItem(\"authToken\"));\r\n\r\n            //try to send page and JWT authToken to server for private data access\r\n            try {\r\n\r\n                const {data} = await axios.get(\"/api/auth/coursework\", config);\r\n                \r\n                //private data returned from server\r\n                setPrivateData(data.data);\r\n                \r\n            } catch (error) {\r\n                //test-console.log(error);\r\n\r\n                setErrorMessage2(error);\r\n\r\n                //remove any token from localStorage because an error occured. Causes: token expired, bad token,\r\n                //no token, token don't match one originially sent on file\r\n                localStorage.removeItem(\"authToken\");\r\n\r\n                setServerError(true);\r\n                setErrorMessage(\"No authorization to view, please Login\");\r\n                \r\n            }\r\n\r\n\r\n        }//serverData\r\n    \r\n        serverData();\r\n    }, [history]);\r\n\r\n    //used to logout user and remove JWT \"authToken\". Then redirects to root homepage\r\n    const logoutHandler = () => {\r\n        localStorage.removeItem(\"authToken\");\r\n        history.push(\"/\");\r\n    }\r\n\r\n\r\n    return(\r\n            <div>\r\n                <h1>Private Screen</h1>\r\n\r\n                {   \r\n                    serverError ? <><span>{errorMessage}</span><p>{errorMessage2}</p> </> : <>\r\n                    \r\n                    <h1>Private Screen Dashboard</h1>\r\n                    <span>{privateData}</span>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <button onClick={logoutHandler}>Logout</button>\r\n                    </>\r\n                }\r\n            </div>  \r\n        );\r\n\r\n};\r\n\r\n\r\nexport default PrivateScreen;\r\n","import {Redirect, Route } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport { useAuth } from '../../context/AuthProvider';\r\n\r\n\r\n\r\n/**This component is used to replace the <Route...> component in the App.js or anywhere you need authentication.\r\n* Originally it used JWT but now uses sessions. If the authentication is not set then it redirects \r\n* the user to Login.js page.\r\n*/\r\nconst PrivateRoute = ({ component: Component, path}) => {\r\n\r\n    const { userState } = useAuth();\r\n   \r\n    //console.log(\"PrivateRoute userState.loggedIn: \" + userState.loggedIn);\r\n\r\n\r\n\r\n    return(        \r\n    <Route \r\n        path={path}\r\n        render = {props => (\r\n            userState.loggedIn \r\n            ?\r\n                <Component {...props} />\r\n            :\r\n                (userState.loggedIn === null \r\n                ? \r\n                    <div className='loading-grid-layout'>\r\n                        <h1>LOADING</h1>\r\n                    </div> \r\n                : \r\n                    <Redirect to='/login' />)\r\n        )}\r\n    />\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nexport default PrivateRoute;\r\n\r\n\r\n    /**\r\n     * login authorization using JSON web tokens but replaced with express sessions\r\n     * \r\n     * const PrivateRoute = ({ component: Component, ...rest }) => {\r\n        <Route {...rest} \r\n            render = {\r\n                (props) => \r\n                //check for Json Web Token (\"authToken\") is set. If set then renders the component route otherwise redirct to Login.js\r\n                //$*localStorage.getItem(\"authToken\") ? \r\n                userState.loggedIn ?\r\n                (<Component {...props}/> ) :\r\n                    (<Redirect to={rest.redirLink} /> )//$*{ history.goBack()}} />)\r\n            }\r\n        />\r\n     */","import './voiceover.css';\r\nimport ReactPlayer from 'react-player';\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**This component is used to show coursework module type: voice over. The data is fetched via props from the parent\r\n * Presentor component. It uses the ReactPlayer component to display the audio stored on the server.\r\n */\r\nconst VoiceOver = (props) => {\r\n\r\n    const loadImages = useRef(false);\r\n    const loadBackgroundImage = useRef(false);\r\n    const loadAudios = useRef(false);\r\n\r\n\r\n\r\n    useEffect(() =>{\r\n        /*test-console.log(\"image Props: \" + JSON.stringify(props.courseContent.images) );\r\n        //console.log(\"Voice stepPositionProp: \" + props.courseContent.stepPosition);\r\n        // {loadAudios.current && <p>{props.courseContent.audios[0].audio}</p>}\r\n        //<h2>{props.courseContent.lessonType}</h2>\r\n        \r\n        console.log(\"Voice loadImages: \" + loadImages);\r\n        */\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //render the UI component if the props has the course module fetched from the server via the Presentor parent\r\n    //component. If not show a loading text tag\r\n    if(props.courseContent !=null) \r\n    {\r\n        return(\r\n\r\n            <>\r\n            \r\n                {(props.courseContent.images != \"\") ? (loadImages.current = true) : (loadImages.current = false)}\r\n                {(props.courseContent.backgroundImage) ? (loadBackgroundImage.current = true) : (loadBackgroundImage.current = false)}\r\n                {(props.courseContent.audios != \"\") ? (loadAudios.current = true) : (loadAudios.current = false)}\r\n\r\n                <div className=\"grid-layout\" \r\n                style={{ backgroundSize: loadBackgroundImage.current ? \"cover\" : \"none\" }}\r\n                style={{ backgroundImage: loadBackgroundImage.current ? `url(${props.courseContent.backgroundImage})` : \"none\" }}\r\n                    >\r\n                   \r\n                   <div className=\"centerContainer\">\r\n                        <br/>\r\n\r\n                        <h1>{props.courseContent.lessontitle}</h1>\r\n\r\n                        <br/>\r\n\r\n                        {loadImages.current && <p><img src={props.courseContent.images[0].image}/></p>}\r\n\r\n                        <br/>\r\n\r\n                        {loadAudios.current &&       <ReactPlayer\r\n                                                        url={props.courseContent.audios[0].audio}\r\n                                                        width=\"400px\"\r\n                                                        height=\"50px\"\r\n                                                        playing={false}\r\n                                                        controls={true}\r\n                                                        onEnded={() => console.log(\"Audio Ended\")}\r\n                                                        />\r\n                        }\r\n\r\n\r\n                        <br/>\r\n                        <br/>\r\n\r\n                        <h3>{props.courseContent.lessonText}</h3>\r\n\r\n                        <br/>\r\n\r\n                        <h2>{props.courseContent.subtext1}</h2>\r\n\r\n                        <h2>{props.courseContent.subtext2}</h2>\r\n\r\n                        <h2>{props.courseContent.subtext3}</h2>\r\n\r\n                        <h2>{props.courseContent.subtext4}</h2>\r\n\r\n\r\n                        <div className=\"buttonDiv\">\r\n\r\n                            <button onClick={props.previousLesson}>Previous Lesson</button>\r\n\r\n                            <button className=\"nextButton\" onClick={props.nextLesson} >Next Lesson</button>\r\n                            {//test-console.log(\"rendered voice component=======\")\r\n                            }\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>Loading.......voiceover</h3>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\nexport default VoiceOver;","import './text.css';\r\nimport { useRef } from 'react';\r\n\r\n\r\n\r\n\r\n\r\n/**This component is used to show coursework module type: text. The data is fetched via props from the parent\r\n * Presentor component. \r\n */\r\nconst Text = (props) => {\r\n\r\n \r\n    const loadImages = useRef(false);\r\n    const loadBackgroundImage = useRef(false);\r\n\r\n\r\n\r\n    //test-<h1>Text Component </h1>\r\n    //test=<h2>{props.courseContent.lessonType}</h2>\r\n\r\n\r\n    //render the UI component if the props has the course module fetched from the server via the Presentor parent\r\n    //component. If not show a loading text tag\r\nif(props.courseContent !=null) \r\n    {\r\n        return(\r\n\r\n            <>\r\n                {/*console.log(\"TEXT 1 loadImages: \" + loadImages.current);\r\n                console.log(\"type of courseContent.images: \" + typeof(props.courseContent.images);\r\n\r\n                props.courseContent.images == \"\" ? console.log(\"empty\") : console.log(\"try again\");\r\n                */}\r\n                \r\n                {//test-console.log(\"TEXT !loadImages: \" + !(props.courseContent.images));\r\n                }\r\n\r\n                {(props.courseContent.images != \"\") ? (loadImages.current = true) : (loadImages.current = false)}\r\n                {(props.courseContent.backgroundImage) ? (loadBackgroundImage.current = true) : (loadBackgroundImage.current = false)}\r\n                \r\n\r\n\r\n                <div className=\"grid-layout\" \r\n                style={{ backgroundSize: loadBackgroundImage.current ? \"cover\" : \"none\" }}\r\n                style={{ backgroundImage: loadBackgroundImage.current ? `url(${props.courseContent.backgroundImage})` : \"none\" }}\r\n                    >\r\n\r\n                    <div className=\"centerContainer\">\r\n                        \r\n                        <div style={{display: props.courseContent ? \"block\" : \"none\"}}>\r\n\r\n                            <br/>\r\n                            <br/>\r\n\r\n                            <h1>{props.courseContent.lessontitle}</h1>\r\n\r\n                            <br/>\r\n                            <br/>\r\n\r\n                            {loadImages.current && <p><img src={props.courseContent.images[0].image}/></p>}\r\n\r\n                            <h2>{props.courseContent.subtext1}</h2>\r\n\r\n                            <h2>{props.courseContent.subtext2}</h2>\r\n\r\n                            <h2>{props.courseContent.subtext3}</h2>\r\n\r\n                            <h2>{props.courseContent.subtext4}</h2>\r\n\r\n                            <br/>\r\n                            <br/>\r\n\r\n                            <h3>{props.courseContent.lessonText}</h3>\r\n\r\n                            <div className=\"buttonDiv\">\r\n\r\n                                <button onClick={props.previousLesson}>Previous Lesson</button>\r\n\r\n                                <button className=\"nextButton\" onClick={props.nextLesson} >Next Lesson</button>\r\n                                {//console.log(\"rendered Text component=======\")\r\n                                }\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h3>Loading......text</h3>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Text;","import './video.css';\r\nimport ReactPlayer from 'react-player';\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**This component is used to show coursework module type: video. The data is fetched via props from the parent\r\n * Presentor component. It uses the ReactPlayer component to display the video stored on the server.\r\n */\r\nconst Video = (props) => {\r\n\r\n    const[videos, setVideos] = useState(false);\r\n\r\n    const loadImages = useRef(false);\r\n    const loadBackgroundImage = useRef(false);\r\n    const loadVideos = useRef(false);\r\n\r\n\r\n    useEffect(() =>{\r\n\r\n        //test-console.log(props);\r\n    }, [])\r\n\r\n    const checkState = () =>{\r\n        console.log(\"checkState--\");\r\n\r\n        //console.log(\"video: \" + JSON.stringify(props.courseContent.video[0].video));\r\n\r\n        setTimeout(() => {\r\n\r\n            if(props.courseContent.video){\r\n                setVideos(true);\r\n                console.log(\"TRUE\")\r\n            }else{\r\n                setVideos(false);\r\n            }\r\n\r\n        }, 2000);\r\n\r\n\r\n    }\r\n\r\n\r\n //<h1>Video Component </h1>\r\n //{loadVideos.current && <p>{props.courseContent.videos[0].video}</p>}\r\n //<h2>{props.courseContent.lessonType}</h2>\r\n\r\n\r\n\r\n    //render the UI component if the props has the course module fetched from the server via the Presentor parent\r\n    //component. If not show a loading text tag\r\n    if(props.courseContent !=null) \r\n    {\r\n        return(\r\n            <>\r\n\r\n                {(props.courseContent.images != \"\") ? (loadImages.current = true) : (loadImages.current = false)}\r\n                {(props.courseContent.backgroundImage) ? (loadBackgroundImage.current = true) : (loadBackgroundImage.current = false)}\r\n                {(props.courseContent.videos != \"\") ? (loadVideos.current = true) : (loadVideos.current = false)}\r\n\r\n                <div className=\"grid-layout\" \r\n                \r\n                \r\n                style={{ backgroundImage: loadBackgroundImage.current ? `url(${props.courseContent.backgroundImage})` : \"none\" }}\r\n                style={{ backgroundRepeat: loadBackgroundImage.current ? \"no-repeat\" : \"none\" }}\r\n                \r\n                        >\r\n\r\n                    <div className=\"centerContainer\">\r\n\r\n                        \r\n\r\n                        <h1>{props.courseContent.lessontitle}</h1>\r\n\r\n                        <br/>\r\n                        <br/>\r\n\r\n                        \r\n                        <center>\r\n                        {loadVideos.current &&  <ReactPlayer style={{border: \"1px solid black\"}}\r\n                                                        url={props.courseContent.videos[0].video}\r\n                                                        width=\"800px\"\r\n                                                        height=\"700px\"\r\n                                                        playing={false}\r\n                                                        controls={true}\r\n                                                        onEnded={() => console.log(\"Video Ended\")}\r\n                                                        />\r\n                        }\r\n                        </center>\r\n                       \r\n                        <br/>\r\n                        <br/>\r\n\r\n                        <h3>{props.courseContent.lessonText}</h3>\r\n\r\n                        <h2>{props.courseContent.subtext1}</h2>\r\n\r\n                        <h2>{props.courseContent.subtext2}</h2>\r\n\r\n                        <h2>{props.courseContent.subtext3}</h2>\r\n\r\n                        <h2>{props.courseContent.subtext4}</h2>\r\n\r\n                        <div className=\"buttonDiv\">\r\n\r\n                            <button onClick={props.previousLesson}>Previous Lesson</button>\r\n\r\n                            <button className=\"nextButton\" onClick={props.nextLesson} >Next Lesson</button>\r\n                            {//test-console.log(\"rendered Video component=======\")\r\n                            }\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n        return(\r\n            <>\r\n                <h3>Loading......video</h3>\r\n            </>\r\n        );\r\n}\r\n\r\n\r\n\r\nexport default Video;","import './slides.css';\r\nimport { useRef } from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**This component is used to show coursework module type: slides. The data is fetched via props from the parent\r\n * Presentor component. \r\n */\r\nconst Slides = (props) => {\r\n\r\n    const loadImages = useRef(false);\r\n    const loadBackgroundImage = useRef(false);\r\n    const loadSlides = useRef(false);\r\n\r\n\r\n\r\n\r\n    //test-<h1>Slides Component </h1>\r\n    //test-<h2>{props.courseContent.lessonType}</h2>\r\n    \r\n\r\n    //render the UI component if the props has the course module fetched from the server via the Presentor parent\r\n    //component. If not show a loading text tag\r\n    if(props.courseContent !=null) \r\n    {\r\n        return(\r\n\r\n            <>\r\n            \r\n                {(props.courseContent.images != \"\") ? (loadImages.current = true) : (loadImages.current = false)}\r\n                {(props.courseContent.backgroundImage) ? (loadBackgroundImage.current = true) : (loadBackgroundImage.current = false)}\r\n                {(props.courseContent.slides != \"\") ? (loadSlides.current = true) : (loadSlides.current = false)}\r\n\r\n                <div className=\"grid-layout\" \r\n                style={{ backgroundSize: loadBackgroundImage.current ? \"cover\" : \"none\" }}\r\n                style={{ backgroundImage: loadBackgroundImage.current ? `url(${props.courseContent.backgroundImage})` : \"none\" }}\r\n                    >\r\n\r\n                   <div className=\"centerContainer\">\r\n\r\n                        <br/>\r\n\r\n                        <h1>{props.courseContent.lessontitle}</h1>\r\n\r\n                        <br/>\r\n\r\n                        {loadSlides.current && <p><img src={props.courseContent.slides[0].image}/></p>}\r\n\r\n                        <br/>\r\n                        <br/>\r\n\r\n                        <h3>{props.courseContent.lessonText}</h3>\r\n\r\n                        <h2>{props.courseContent.subtext1}</h2>\r\n\r\n                        <h2>{props.courseContent.subtext2}</h2>\r\n\r\n                        <h2>{props.courseContent.subtext3}</h2>\r\n\r\n                        <h2>{props.courseContent.subtext4}</h2>\r\n\r\n                        <div className=\"buttonDiv\">\r\n\r\n                            <button onClick={props.previousLesson}>Previous Lesson</button>\r\n\r\n                            <button className=\"nextButton\" onClick={props.nextLesson} >Next Lesson</button>\r\n                            {//test-console.log(\"rendered Slides component=======\")\r\n                            }\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n             </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>Loading.......slide</h3>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\nexport default Slides;\r\n\r\n\r\n","import '../../App.css';\r\nimport './Presentor.css';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport VoiceOver from '../voiceover/VoiceOver';\r\nimport Text from  '../text/Text';\r\nimport Video from '../video/Video';\r\nimport Slides from '../slides/Slides';\r\nimport Assessment from '../assessment/Assessment';\r\n\r\nimport { useAuth } from '../../context/AuthProvider';\r\n\r\n\r\n\r\n\r\n\r\n/**This component is used to show the module lessons to the user. It has other components that are rendered\r\n * based what lesson that is fetched from the backend mongo database of modules lesson. The module lessons\r\n * are retrieved based on the module number, lessonid number, and stepPosition number. If components consists\r\n * of voice over, text, video, slides, and assessment and is rendered by the 'type' of json lesson recieved.\r\n */\r\nconst Presentor = () => {\r\n\r\n    const { email, userState, lastLesson, modulesCompleted, setLastLesson, addLessonIdToModuleCompleted, setModuleFinished, addNextModule } = useAuth();\r\n\r\n    const [start, setStart] = useState(false);\r\n    const [showButton, setShowButton] = useState(true);\r\n    const [courseContent, setCourseContent] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const [isCompletedModule, setIsCompletedModule] = useState(false);\r\n    const [inProgressModule, setInProgressModule] = useState(false);\r\n\r\n    const [voiceOverComponent, setVoiceOverComponent] = useState(false);\r\n    const [textComponent, setTextComponent] = useState(false);\r\n    const [videoComponent, setVideoComponent] = useState(false);\r\n    const [slidesComponent, setSlidesComponent] = useState(false);\r\n    const [assessmentComponent, setAssessmentComponent] = useState(false);\r\n\r\n\r\n    const [presentor, setPresentor] = useState(\"Presentor\");\r\n    const [stepPosition, setStepPosition] = useState(0);\r\n    const [currentModule, setCurrentModule] = useState(0);\r\n    const [contentType, setContentType] = useState(\"none\");\r\n    //const [nextStepPosition, setNextStepPosition] = useState(0);\r\n\r\n\r\n\r\n    const location = useLocation();//used to get card paramters passed in\r\n    const history = useHistory();//used to push user to other Routes if needed\r\n    const lessonStepRef = useRef(0);//used to keep track of where the user is in the lessons order of the module\r\n    const lastModuleLessonTypeRef =  useRef(\"text\");\r\n    \r\n\r\n    useEffect(() => {\r\n\r\n        //Get modules when the component first loads based on the location parameters\r\n        if(location.state){\r\n            getModules();\r\n        }\r\n        \r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //This method gets the module from the server. It gets the last lesson the user did or the lesson from the \r\n    //module that starts. \r\n    const getModules = async () => {\r\n\r\n        //these are the parameters sent from the cards in the userdashboard. The parameters in 'location'\r\n        let cardModule;\r\n        let cardLessionId;\r\n\r\n\r\n        //This checks if its from completed modules and finds the module and lessonId\r\n        if(location.state.module){\r\n            \r\n            setIsCompletedModule(true);\r\n            \r\n            cardModule = location.state.module;\r\n\r\n            setCurrentModule(cardModule);\r\n\r\n            cardLessionId = 1;\r\n\r\n            //test-console.log(location);\r\n            //test-console.log(\"isComplete: \" + isCompletedModule);\r\n            //test-console.log(\"cardModule: \" + cardModule + \", cardLessionId: \" + cardLessionId);\r\n\r\n        }\r\n        \r\n        //this checks if its from Inprogress modules where the user last left off. Module and lessonId\r\n        if(location.state.lastLesson){\r\n            \r\n            setInProgressModule(true);\r\n            \r\n            cardModule = location.state.lastLesson.module;\r\n\r\n            setCurrentModule(cardModule);\r\n\r\n            cardLessionId = location.state.lastLesson.lessonId;\r\n\r\n            //test-console.log(location);\r\n            //test-console.log(\"inProgress: \" + inProgressModule);\r\n            //test-console.log(\"cardModue: \" + cardModule + \", cardLessionId: \" + cardLessionId);\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        const config = {\r\n            header: {\"Content-Type\": \"application/json\"}\r\n        }\r\n\r\n        let serverDataModules;\r\n\r\n        try{\r\n            //Fetch module lesson from the server based on the module number and lesson id\r\n            serverDataModules = await axios.get(`api/auth/coursework/modules/${cardModule}/${cardLessionId}`, config);\r\n\r\n            //test-console.log(\"serverDataModules : \" + serverDataModules);\r\n            //test-console.log(serverDataModules.data.courseModule.lessonType);\r\n\r\n            setContentType(serverDataModules.data.courseModule.lessonType);\r\n\r\n            lastModuleLessonTypeRef.current = serverDataModules.data.courseModule.lessonType;\r\n\r\n\r\n            //Set the lesson course content to be displayed in the Presentor component for the user\r\n            setCourseContent(serverDataModules.data.courseModule)\r\n            setStepPosition(serverDataModules.data.courseModule.stepPosition);\r\n            lessonStepRef.current = lessonStepRef.current + serverDataModules.data.courseModule.stepPosition;\r\n            \r\n\r\n        }catch(error){\r\n            console.log(JSON.stringify(error));\r\n            //show error in the form\r\n            setErrorMessage(error.response.data.error);\r\n\r\n        }\r\n\r\n    }//getModules\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //This function is sent by props to the children lesson components and is trigger when the user wants to \r\n    //move forward to the next lesson step.\r\n    const nextLesson = async () => {\r\n\r\n        setPresentor(\"next Lesson button clicked\");\r\n        \r\n        //This sets the course content to null so that it will not cause conflicts with any component that is\r\n        //currently rendered. Since each component is slighlty different the data coming may cause rendereng errors\r\n        setCourseContent(null);\r\n\r\n        let currentStepPosition = lessonStepRef.current;\r\n        let nextStepPosition = lessonStepRef.current + 1;\r\n        console.log(\"NEXT lessonStepRef.current: \" + lessonStepRef.current);\r\n        //lessonStepRef.current = nextStepPosition;\r\n        //setNextStepPosition(stepPosition + 1);\r\n\r\n        \r\n        //test-console.log(\"NEXT stepPosition: \" + stepPosition + \" currentStepPosition \" + currentStepPosition + \" NEXT nextStepPosition: \" + nextStepPosition);\r\n        \r\n        const config = {\r\n            header: {\"Content-Type\": \"application/json\"}\r\n        }\r\n\r\n\r\n        let serverDataModules;//content from server\r\n        let contentType;//used to check lesson content type to send to component\r\n\r\n        try{\r\n\r\n            if(lastModuleLessonTypeRef.current != 'assessment'){\r\n                //get the next module lesson to render in the Presentor components\r\n                serverDataModules = await axios.get(`api/auth/coursework/nextmodule/${currentModule}/${nextStepPosition}`, config);\r\n\r\n\r\n                //test-console.log(\"PRESENTOR - currentModule: \" + currentModule + \", lastLesson.module: \" + lastLesson.module);\r\n                //test-console.log(\"PRESENTOR - currentStepPosition: \" + currentStepPosition + \", lastLesson.lessonId: \" + lastLesson.lessonId);\r\n                \r\n                \r\n                \r\n                //this code is used to update the user progress. The last lessson and add the lesson id to the user\r\n                if(currentModule >= lastLesson.module && currentStepPosition > lastLesson.lessonId){\r\n\r\n                    setLastLesson({module: currentModule, lessonId: currentStepPosition}, true);\r\n\r\n                    //test-console.log(\"PRESENTOR* - Set last lesson to currentStepPosition: \" + currentStepPosition);\r\n                    //test-console.log(\"PRESENTOR* - changed lastLesson.module: \" + lastLesson.module + \" lastLesson.lessonId: \" + lastLesson.lessonId);\r\n\r\n                    //the went onto a new lessonId we need to update the authProvider global userState context\r\n                    //user's modulesCompleted.module.lessonIds array nextStepPosition (assessment)\r\n                    addLessonIdToModuleCompleted(currentModule, currentStepPosition);\r\n                    console.log(\"4 modulesCompleted: \" + JSON.stringify(userState.modulesCompleted));\r\n\r\n                    //save user progress info 'currentStepPosition/stepPosition/lessonId' and last lesson  \r\n                    //AXIOS PATCH to update user progress json object. Axios will set the content-type header to application/json\r\n                    const userUpdateProgressResponse = await axios.patch(\"/api/auth/coursework/updateprogress\", { email, currentModule, currentStepPosition });\r\n                    \r\n                    console.log(userUpdateProgressResponse.data.message);\r\n                } \r\n               \r\n            }else{\r\n                //test-console.log(\"Assessment is Finished --- currentStepPosition: \" + currentStepPosition);\r\n\r\n                //they passed the last lesson which is the Assessment quizzes so add this lessonid to the \r\n                //user's modulesCompleted.module.lessonIds array nextStepPosition (assessment) and update the\r\n                //server with an Axios call to the associated endpoint\r\n                addLessonIdToModuleCompleted(currentModule, currentStepPosition);\r\n                setLastLesson({module: currentModule + 1, lessonId: 0}, true);\r\n                \r\n                const userUpdateProgressResponse = await axios.patch(\"/api/auth/coursework/updateprogress\", { email, currentModule, currentStepPosition });\r\n\r\n                //test-console.log(userUpdateProgressResponse.data.message);\r\n\r\n                //and set modulesCompleted.module.moduleFinished true boolean so it updates the cards on the userdashboard\r\n                const finished = true;\r\n                setModuleFinished(currentModule, finished);\r\n                \r\n                //add to array modulesCompleted: {module: currentModule + 1, lessonIds: [0], moduleFinished: false}\r\n                //so the authProvider global userState context has been updated\r\n                addNextModule({ module: currentModule + 1, lessonIds: [0], moduleFinish: false });\r\n\r\n                //test-console.log(\"7)Assessment is Finished --- added newModule modulesCompleted: \" + JSON.stringify(userState.modulesCompleted));\r\n\r\n                \r\n                //AXIOS make the axios calls to update user progress that they finished the module\r\n                const userFinishedModule = await axios.patch(\"/api/auth/coursework/modulefinished\", { email, currentModule, currentStepPosition });\r\n\r\n                //test-console.log(userFinishedModule.data.message);\r\n                //test-console.log(\"Finished Module and added => modulesCompleted: \" + JSON.stringify(userState.modulesCompleted));\r\n                \r\n                //redirect user to user dashboard\r\n                return history.push(\"/finishedmodule\");\r\n\r\n            }\r\n            //test-console.log(\"NEXT serverDataModules : \" + JSON.stringify(serverDataModules));\r\n\r\n            lastModuleLessonTypeRef.current = serverDataModules.data.courseModule.lessonType;\r\n\r\n            setStepPosition(serverDataModules.data.courseModule.stepPosition);\r\n\r\n            lessonStepRef.current = serverDataModules.data.courseModule.stepPosition;\r\n\r\n            //test-console.log(\"NEXT serverDataModules.courseModule.contentType: \" + serverDataModules.data.courseModule.lessonType);\r\n            //test-console.log(\"NEXT contentType: \" + contentType);\r\n           \r\n\r\n            contentType = serverDataModules.data.courseModule.lessonType;\r\n\r\n            //Render the appropriate component to show the lesson data based on the type, turn off all else\r\n            if(contentType == \"voice over\"){\r\n                setVoiceOverComponent(true);\r\n                setTextComponent(false);\r\n                setVideoComponent(false);\r\n                setSlidesComponent(false);\r\n                setAssessmentComponent(false);\r\n\r\n            }else if(contentType == \"text\"){\r\n                setVoiceOverComponent(false);\r\n                setTextComponent(true);\r\n                setVideoComponent(false);\r\n                setSlidesComponent(false);\r\n                setAssessmentComponent(false);\r\n\r\n            }else if(contentType == \"video\"){\r\n                setVoiceOverComponent(false);\r\n                setTextComponent(false);\r\n                setVideoComponent(true);\r\n                setSlidesComponent(false);\r\n                setAssessmentComponent(false);\r\n\r\n            }else if(contentType == \"slides\"){\r\n                setVoiceOverComponent(false);\r\n                setTextComponent(false);\r\n                setVideoComponent(false);\r\n                setSlidesComponent(true);\r\n                setAssessmentComponent(false);\r\n\r\n            }else if(contentType == \"assessment\"){\r\n                setVoiceOverComponent(false);\r\n                setTextComponent(false);\r\n                setVideoComponent(false);\r\n                setSlidesComponent(false);\r\n                setAssessmentComponent(true);\r\n\r\n            }else{\r\n                \r\n                setErrorMessage(\"No component type set for Presentor to render\");\r\n            }\r\n\r\n            console.log(\"Boolean voice component: \" + voiceOverComponent);\r\n            console.log(\"Boolean text component: \" + textComponent);\r\n\r\n            \r\n            //set module lesson content for the component to display\r\n            setCourseContent(serverDataModules.data.courseModule);\r\n\r\n\r\n        }catch(error){\r\n            console.log(error);\r\n            //show error in the form\r\n            setErrorMessage(error.response.data.error);\r\n\r\n        }\r\n\r\n\r\n    }//nextLesson\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //This function is sent by props to the children lesson components and is trigger when the user wants to \r\n    //move backwards to a previous lesson step.\r\n    const previousLesson = async () => {\r\n\r\n        setPresentor(\"previous Lesson button clicked\");\r\n\r\n        let previousStepPosition = lessonStepRef.current - 1;//stepPosition - 1;\r\n\r\n //let nextStepPosition = \r\n        //lessonStepRef.current = previousStepPosition;//nextStepPosition;\r\n\r\n        console.log(\"PREVIOUS previousStepPosition: \" + previousStepPosition + \", stepPosition: \" + stepPosition);\r\n        console.log(\"PREVIOUS lessonStepRef.current: \" + lessonStepRef.current);\r\n        \r\n\r\n       \r\n        //setNextStepPosition(stepPosition);\r\n        \r\n        const config = {\r\n            header: {\"Content-Type\": \"application/json\"}\r\n        }\r\n\r\n        let serverDataModules;\r\n        let contentType;\r\n\r\n        try{\r\n\r\n            //fetch previous lesson data unless its the first lesson. The send them to the user dashboard\r\n            if(stepPosition != 1){\r\n                \r\n                serverDataModules = await axios.get(`api/auth/coursework/nextmodule/${currentModule}/${previousStepPosition}`, config);\r\n                \r\n            }else{\r\n            //redirect user to user dashboard\r\n            history.push(\"/userdashboard\");\r\n\r\n            }\r\n            //test-console.log(\"PREVIOUS serverDataModules : \" + JSON.stringify(serverDataModules));\r\n\r\n            lastModuleLessonTypeRef.current = serverDataModules.data.courseModule.lessonType;\r\n\r\n            setStepPosition(serverDataModules.data.courseModule.stepPosition);\r\n\r\n            lessonStepRef.current = serverDataModules.data.courseModule.stepPosition;\r\n            //test-console.log(\"PREVIOUS lessonStepRef.current: \" + lessonStepRef.current);\r\n            //test-console.log(\"stepPosition: \" + stepPosition);\r\n\r\n\r\n            contentType = serverDataModules.data.courseModule.lessonType;\r\n\r\n            //Render the appropriate component to show the lesson data based on the type, turn off all else\r\n            if(contentType == \"voice over\"){\r\n                setVoiceOverComponent(true);\r\n                setTextComponent(false);\r\n                setVideoComponent(false);\r\n                setSlidesComponent(false);\r\n                setAssessmentComponent(false);\r\n\r\n            }else if(contentType == \"text\"){\r\n                setVoiceOverComponent(false);\r\n                setTextComponent(true);\r\n                setVideoComponent(false);\r\n                setSlidesComponent(false);\r\n                setAssessmentComponent(false);\r\n\r\n            }else if(contentType == \"video\"){\r\n                setVoiceOverComponent(false);\r\n                setTextComponent(false);\r\n                setVideoComponent(true);\r\n                setSlidesComponent(false);\r\n                setAssessmentComponent(false);\r\n\r\n            }else if(contentType == \"slides\"){\r\n                setVoiceOverComponent(false);\r\n                setTextComponent(false);\r\n                setVideoComponent(false);\r\n                setSlidesComponent(true);\r\n                setAssessmentComponent(false);\r\n\r\n            }else if(contentType == \"assessment\"){\r\n                setVoiceOverComponent(false);\r\n                setTextComponent(false);\r\n                setVideoComponent(false);\r\n                setSlidesComponent(false);\r\n                setAssessmentComponent(true);\r\n\r\n            }else {\r\n\r\n                setErrorMessage(\"No component type set for Presentor to render\");\r\n            }\r\n\r\n\r\n            \r\n\r\n            setCourseContent(serverDataModules.data.courseModule);\r\n\r\n\r\n        }catch(error){\r\n            console.log(JSON.stringify(error));\r\n            //show error in the form\r\n            //setErrorMessage(error.response.data.error);\r\n\r\n        }\r\n\r\n\r\n    }//previousLesson\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //This is used to start the lesson. It re-renders the first component becasue the component is rendered\r\n    //before the lesson data is recieved and the state variable are set. \r\n    const startLesson = () => {\r\n\r\n        setShowButton(false);//hide the start button\r\n        setStart(true);//show and render the first lesson component\r\n        \r\n        //Render the appropriate component to show the lesson data based on the type, turn off all else\r\n        if(contentType == \"voice over\"){\r\n            setVoiceOverComponent(true);\r\n            setTextComponent(false);\r\n            setVideoComponent(false);\r\n            setSlidesComponent(false);\r\n            setAssessmentComponent(false);\r\n\r\n        }else if(contentType == \"text\"){\r\n            setVoiceOverComponent(false);\r\n            setTextComponent(true);\r\n            setVideoComponent(false);\r\n            setSlidesComponent(false);\r\n            setAssessmentComponent(false);\r\n\r\n        }else if(contentType == \"video\"){\r\n            setVoiceOverComponent(false);\r\n            setTextComponent(false);\r\n            setVideoComponent(true);\r\n            setSlidesComponent(false);\r\n            setAssessmentComponent(false);\r\n\r\n        }else if(contentType == \"slides\"){\r\n            setVoiceOverComponent(false);\r\n            setTextComponent(false);\r\n            setVideoComponent(false);\r\n            setSlidesComponent(true);\r\n            setAssessmentComponent(false);\r\n\r\n        }else if(contentType == \"assessment\"){\r\n            setVoiceOverComponent(false);\r\n            setTextComponent(false);\r\n            setVideoComponent(false);\r\n            setSlidesComponent(false);\r\n            setAssessmentComponent(true);\r\n\r\n        }else {\r\n\r\n            setErrorMessage(\"No component type set for Presentor to render\");\r\n        }\r\n    }//startLesson\r\n\r\n\r\n\r\n\r\n    //test-<p>{JSON.stringify(courseContent)}</p>\r\n    //test-<h1>{presentor}</h1>\r\n\r\n\r\n\r\n\r\n    //The following JSX is used to render the different coursework module lesson types\r\n    return(\r\n        <div className=\"grid-layout\">\r\n            \r\n\r\n            <h1><span style={{color: \"red\"}}>{errorMessage}</span></h1>\r\n\r\n\r\n\r\n            <div style={{display: start ? \"block\" : \"none\"}}>\r\n\r\n                {voiceOverComponent ? <VoiceOver courseContent={courseContent} previousLesson={previousLesson} nextLesson={nextLesson}/> : <span></span>}\r\n\r\n                {textComponent ? <Text courseContent={courseContent} previousLesson={previousLesson} nextLesson={nextLesson}/> : <span></span>}\r\n\r\n                {videoComponent ? <Video courseContent={courseContent} previousLesson={previousLesson} nextLesson={nextLesson}/> : <span></span>}\r\n\r\n                {slidesComponent ? <Slides courseContent={courseContent} previousLesson={previousLesson} nextLesson={nextLesson}/> : <span></span>}\r\n\r\n                {assessmentComponent ? <Assessment courseContent={courseContent} previousLesson={previousLesson} nextLesson={nextLesson}/> : <span></span>}\r\n            \r\n            </div>\r\n\r\n\r\n            <div className=\"centerButtonContainer\">\r\n                <button className=\"centerStartButton\" style={{fontSize: \"25px\", display: showButton ? \"block\" : \"none\"}} onClick={startLesson}>Click to Start</button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Presentor;","import { useHistory } from 'react-router-dom';\r\n\r\n\r\n\r\n/**This component is used to show the user they are finished with the course modules. It is used at the end of \r\n * the assessment component. It's only function is to redirect the user to the dashboard. It is used in the\r\n * Presentor component.\r\n */\r\nconst FinishedModule = () => {\r\n\r\n    const history = useHistory();\r\n\r\n\r\n    \r\n\r\n    const redirectToDashboard = () => {\r\n\r\n        history.push(\"/userdashboard\");\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className='assessment-grid-layout'>\r\n \r\n            <div className=\"centerContainer\">\r\n                <br/>\r\n                <h1>Congradulations!</h1>\r\n                <br/>\r\n                <h2>You have finished this module</h2>\r\n\r\n                <br/>\r\n                <br/>\r\n\r\n                <button onClick={redirectToDashboard}>Please Click to Continue</button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default FinishedModule;\r\n\r\n\r\n","import './MyProfile.css';\r\nimport { useEffect, useState } from 'react';\r\nimport { useAuth } from '../../context/AuthProvider';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**This component is used to display the user's information they registered with. It has two table forms and\r\n * each has its own submit handler functions that send sperate server patch requests to different API endpoints.\r\n * the user can update their information on their account using this component and is accessible once logged in.\r\n */\r\nconst MyProfile = () => {\r\n\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [middleName, setMiddleName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [address, setAddress] = useState(\"\");\r\n    const [city, setCity] = useState(\"\");\r\n    const [states, setStates] = useState(\"\");\r\n    const [zipcode, setZipcode] = useState(\"\");\r\n    const [month, setMonth] = useState(\"\");\r\n    const [day, setDay] = useState(\"\");\r\n    const [year, setYear] = useState(\"\");\r\n    const [gender, setGender] = useState(\"\");\r\n    const [phone, setPhone] = useState(\"\");\r\n\r\n    const [licenseIdNumber, setLicenseIdNumber] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n\r\n    const [userInfo, setUserInfo] = useState();\r\n\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n    const [successPersonalChange, setSuccessPersonalChange] = useState(false);\r\n    const [successAccountChange, setSuccessAccountChange] = useState(false);\r\n\r\n    const [failPersonalChange, setFailPersonalChange] = useState(false);\r\n    const [failAccountChange, setFailAccountChange] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const { userState } = useAuth();\r\n\r\n\r\n    //\r\n    useEffect(() => {\r\n\r\n        getUserData();\r\n\r\n    }, []);\r\n\r\n    const getUserData = async () => {\r\n\r\n        if(userState.loggedIn){\r\n\r\n            const config = {\r\n                header: {\"Content-Type\": \"application/json\"}\r\n            }\r\n\r\n            try {\r\n                //fetch the users personal data to display from the server\r\n                const userData = await axios.get(`/api/auth/userinfo/userdata/${userState.email}`, config);\r\n\r\n                console.log(\"userData: \" + JSON.stringify(userData.data.user));\r\n\r\n                setFirstName(userData.data.user.firstName);\r\n                setMiddleName(userData.data.user.middleName);\r\n                setLastName(userData.data.user.lastName);\r\n                setAddress(userData.data.user.address);\r\n                setCity(userData.data.user.city);\r\n                setStates(userData.data.user.states);\r\n                setZipcode(userData.data.user.zipcode);\r\n                setMonth(userData.data.user.month);\r\n                setDay(userData.data.user.day);\r\n                setYear(userData.data.user.year);\r\n                setGender(userData.data.user.gender);\r\n                setPhone(userData.data.user.phone);\r\n\r\n                setLicenseIdNumber(userData.data.user.licenseIdNumber);\r\n                setUsername(userData.data.user.username);\r\n\r\n                setUserInfo(userData.data.user);\r\n\r\n                \r\n\r\n            } catch (error) {\r\n\r\n                console.log(error);\r\n                \r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    //handler function to set gender in the select dropdown menu\r\n    const selectGenderHandler = Event => {\r\n        setGender(Event);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //handler function for changing PERSONAL information of the user if anything has changed\r\n    const changePersonalInfoHandler = async (Event) => {\r\n        Event.preventDefault();\r\n        console.log(\"handlerPersonalInfo\");\r\n\r\n        //JSON object to send and add to if anything has changed in the inputs\r\n        let userPersonalInfoChanged = { email: userState.email };\r\n\r\n        //Check to see if any of the user information has changed and add to the JSON object to send\r\n        if(firstName != userInfo.firstName){\r\n            userPersonalInfoChanged[\"firstName\"] = firstName;\r\n            //test-console.log(\"firstName has changed\");\r\n        }\r\n        if(middleName != userInfo.middleName){\r\n            userPersonalInfoChanged[\"middleName\"] = middleName;\r\n        }\r\n        if(lastName != userInfo.lastName){\r\n            userPersonalInfoChanged[\"lastName\"] = lastName;\r\n            //test-console.log(\"lastSName has changed\");\r\n        }\r\n        if(address != userInfo.address){\r\n            userPersonalInfoChanged[\"address\"] = address;\r\n        }\r\n        if(city != userInfo.city){\r\n            userPersonalInfoChanged[\"city\"] = city;\r\n        }\r\n        if(states != userInfo.states){\r\n            userPersonalInfoChanged[\"states\"] = states;\r\n        }\r\n        if(zipcode != userInfo.zipcode){\r\n            userPersonalInfoChanged[\"zipcode\"] = zipcode;\r\n        }\r\n        if(month != userInfo.month){\r\n            userPersonalInfoChanged[\"month\"] = month;\r\n        }        \r\n        if(day != userInfo.day){\r\n            userPersonalInfoChanged[\"day\"] = day;\r\n        }\r\n        if(year != userInfo.year){\r\n            userPersonalInfoChanged[\"year\"] = year;\r\n        }\r\n        if(gender != userInfo.gender){\r\n            userPersonalInfoChanged[\"gender\"] = gender;\r\n        }\r\n        if(phone != userInfo.phone){\r\n            userPersonalInfoChanged[\"phone\"] = phone;\r\n        }\r\n\r\n        const config = {\r\n            header: { \"Content-Type\": \"application/json\" }\r\n        }\r\n\r\n        try {\r\n            //Change the user's data to update the server\r\n            const userChangedResponse = await axios.patch(\"/api/auth/userinfo/changeuserdata\", userPersonalInfoChanged);\r\n\r\n            if(userChangedResponse.data.success){\r\n                setIsSuccess(true);\r\n                setSuccessMessage(userChangedResponse.data.message);\r\n\r\n                setSuccessPersonalChange(true); \r\n\r\n                setInterval(() => {\r\n                    setIsSuccess(false);\r\n                    setSuccessPersonalChange(false); \r\n\r\n                }, 5000);\r\n                \r\n            }else{\r\n                setIsError(true); \r\n                setErrorMessage(userChangedResponse.data.message);\r\n\r\n                setFailPersonalChange(true);  \r\n\r\n                setInterval(() => {\r\n                    setIsError(false);\r\n                    setFailPersonalChange(false);                   \r\n                }, 5000);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n            \r\n            setIsError(true);\r\n            setErrorMessage(\"Profile Error: \" + error);\r\n\r\n            setInterval(() => {\r\n                setIsError(false);\r\n                setErrorMessage(\"\");\r\n            }, 5000 )\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //handler function to change the ACCOUNT information if it has changed\r\n    const changeAccountInfoHandler = async (Event) => {\r\n        Event.preventDefault();\r\n        console.log(\"handlerAccountInfo\");\r\n\r\n        //JSON object to send and add to if anything has changed in the inputs\r\n        let userAccountInfoChanged = { email: userState.email };\r\n\r\n        //Check to see if any of the user information has changed and add to the JSON object to send\r\n        if(username != userInfo.username){\r\n            userAccountInfoChanged[\"username\"] = username;\r\n            //test-console.log(\"firstName has changed\");\r\n        }\r\n        if(password != newPassword){\r\n            userAccountInfoChanged[\"password\"] = password;\r\n            userAccountInfoChanged[\"newPassword\"] = newPassword;\r\n        }\r\n\r\n        try {\r\n\r\n            const userAccountChangedResponse = await axios.patch(\"/api/auth/userinfo/changeaccountdata\", userAccountInfoChanged);\r\n\r\n            if(userAccountChangedResponse.data.success){\r\n                setIsSuccess(true); \r\n                setSuccessMessage(userAccountChangedResponse.data.message);\r\n\r\n                setSuccessAccountChange(true);  \r\n\r\n                setInterval(() => {\r\n                    setIsSuccess(false);\r\n                    setSuccessAccountChange(false); \r\n\r\n                }, 5000);\r\n                \r\n            }else{\r\n                setIsError(true); \r\n                setErrorMessage(userAccountChangedResponse.data.message);\r\n\r\n                setFailAccountChange(true);  \r\n\r\n                setInterval(() => {\r\n                    setIsError(false);\r\n                    setFailAccountChange(false);                   \r\n                }, 5000);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n            \r\n            setIsError(true);\r\n            setErrorMessage(\"Profile Error: \" + error);\r\n            \r\n            setInterval(() => {\r\n                setIsError(false);\r\n                setErrorMessage(\"\");\r\n            }, 5000 )\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //the JSX has two tables to display the user information. A Personal table and and Account table. Each has \r\n    //its own submit handler functions that access different API endpoint. \r\n    return(\r\n\r\n        <>\r\n\r\n            <div className=\"main-grid-layout\">\r\n\r\n                <p style={{display: isSuccess ? \"block\" : \"none\", textAlign: \"center\", fontSize: \"30px\", color: \"green\", fontWeight: \"bold\"}}>{successMessage}</p> \r\n                <p style={{display: isError ? \"block\" : \"none\", textAlign: \"center\", fontSize: \"20px\", color: \"red\", fontWeight: \"bold\"}}>{errorMessage}</p>\r\n\r\n\r\n\r\n                <div className=\"centerProfileContainer\">\r\n\r\n\r\n\r\n             \r\n                    <table className=\"profileTable\" style={{float: \"left\"}}>\r\n                        <tr>\r\n                            <th className=\"headerStyle\" colSpan=\"2\">Personal Information</th>   \r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <label className=\"spanLabel\">FIRST NAME</label>\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"text\" id=\"firstName\" placeholder=\"xxxxx\" \r\n                                    value={firstName} onChange={(Event) => setFirstName(Event.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td >\r\n                                <label className=\"spanLabel\">MIDDLE NAME</label>\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"text\" id=\"middleName\" placeholder=\"xxxxx\" \r\n                                    value={middleName} onChange={(Event) => setMiddleName(Event.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <label className=\"spanLabel\">LAST NAME</label>\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"text\" id=\"lastName\" placeholder=\"xxxxx\" \r\n                                    value={lastName} onChange={(Event) => setLastName(Event.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <label className=\"spanLabel\">ADDRESS</label>\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"text\" id=\"address\" placeholder=\"xxxxx\" \r\n                                    value={address} onChange={(Event) => setAddress(Event.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <label className=\"spanLabel\">CITY</label>\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"text\" id=\"city\" placeholder=\"xxxxx\" \r\n                                    value={city} onChange={(Event) => setCity(Event.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <label className=\"spanLabel\">STATE</label>\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"text\" id=\"states\" placeholder=\"xxxxx\" \r\n                                    value={states} onChange={(Event) => setStates(Event.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <label className=\"spanLabel\">ZIPCODE</label>\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"text\" id=\"zipcode\" placeholder=\"xxxxx\" \r\n                                    value={zipcode} onChange={(Event) => setZipcode(Event.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <label className=\"spanLabel\">MONTH</label>\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"text\" id=\"month\" placeholder=\"xxxxx\" \r\n                                    value={month} onChange={(Event) => setMonth(Event.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <label className=\"spanLabel\">DAY</label>\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"text\" id=\"day\" placeholder=\"xxxxx\" \r\n                                    value={day} onChange={(Event) => setDay(Event.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <label className=\"spanLabel\">YEAR</label>\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"text\" id=\"year\" placeholder=\"xxxxx\" \r\n                                    value={year} onChange={(Event) => setYear(Event.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <label className=\"spanLabel\">GENDER</label>\r\n                            </td>\r\n                            <td>\r\n                            <select className=\"profileSelect\" name=\"gender\" id=\"gender\" placeholder=\"male\" onChange={(Event) => selectGenderHandler(Event.target.value)} >\r\n\r\n                                <option value=\"male\">Male</option>\r\n                                <option value=\"female\">Female</option>\r\n                                <option value=\"other\">Other</option>\r\n\r\n                                </select>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <label className=\"spanLabel\">PHONE</label>\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"text\" id=\"phone\" placeholder=\"xxxxx\" \r\n                                    value={phone} onChange={(Event) => setPhone(Event.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan=\"2\" style={{textAlign: \"center\"}}>\r\n                                <button className=\"buttonOrange\" onClick={changePersonalInfoHandler}><h2>Save Changes</h2></button>\r\n                            </td>\r\n                        </tr>\r\n                        <tr >\r\n                            <td colSpan=\"2\" style={{backgroundColor: \"#105e7a\", textAlign: \"center\", fontWeight: \"bold\", fontSize: \"25px\", color:\"white\"}}>\r\n                                <span style={{display: successPersonalChange ? \"block\" : \"none\"}}>Sucessfully Save Change</span>\r\n                                <span style={{display: failPersonalChange ? \"block\" : \"none\"}}>Failed Save Change</span>\r\n                            </td>\r\n                        </tr>\r\n                        \r\n                    </table>\r\n\r\n\r\n\r\n\r\n                    <div className=\"accountInfo\">\r\n\r\n                        <table className=\"profileTable\">\r\n                                \r\n                            <tr>\r\n                                <th className=\"headerStyle\" colSpan=\"2\">Account Information</th>   \r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <label className=\"spanLabel\">LICENSE NUMBER</label>\r\n                                </td>\r\n                                <td>\r\n                                    <input type=\"text\" id=\"licenseIdNumber\" placeholder=\"xxxxx\" \r\n                                        value={licenseIdNumber} readOnly/>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <label className=\"spanLabel\">USERNAME</label>\r\n                                </td>\r\n                                <td>\r\n                                    <input type=\"text\" id=\"username\" placeholder=\"xxxxx\" \r\n                                        value={username} onChange={(Event) => setUsername(Event.target.value)} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <label className=\"spanLabel\">PASSWORD</label>\r\n                                </td>\r\n                                <td>\r\n                                    <input type=\"password\" id=\"password\" placeholder=\"xxxxx\" \r\n                                        value={password} onChange={(Event) => setPassword(Event.target.value)}  />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <label className=\"spanLabel\">NEW PASSWORD</label>\r\n                                </td>\r\n                                <td>\r\n                                    <input type=\"password\" id=\"newPassword\" placeholder=\"xxxxx\" \r\n                                        value={newPassword} onChange={(Event) => setNewPassword(Event.target.value)} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan=\"2\" style={{textAlign: \"center\"}}>\r\n                                    <button className=\"buttonOrange\" onClick={changeAccountInfoHandler}><h2>Change</h2></button>\r\n                                </td>\r\n                            </tr>\r\n                            <tr >\r\n                            <td colSpan=\"2\" style={{backgroundColor: \"#105e7a\", textAlign: \"center\", fontWeight: \"bold\", fontSize: \"25px\", color:\"white\"}}>\r\n                                <span style={{display: successAccountChange ? \"block\" : \"none\"}}>Sucessfully Save Change</span>\r\n                                <span style={{display: failAccountChange ? \"block\" : \"none\"}}>Failed Save Change</span>\r\n                            </td>\r\n                        </tr>\r\n                        \r\n                        </table>\r\n                    </div>\r\n\r\n                <div>\r\n                \r\n                \r\n                </div>\r\n\r\n                <br/>\r\n            </div>\r\n\r\n            </div>\r\n\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default MyProfile;","\r\nimport './Usercard.css';\r\nimport { useState, useRef } from 'react';\r\n\r\n\r\n\r\n\r\n/**This component is used to display the users information and course module progress in a card format.\r\n * It is used in the AdminUsers module to display all the organization's users. It will only be used\r\n * if the login user has the role of admin or instructor\r\n */\r\nconst Card = ({ role, firstName, middleName, lastName, email, courseModules, userModulesCompleted }) => {\r\n\r\n    const [isAuth, setIsAuth] = useState(true);\r\n\r\n    //the modules the user has taken so far\r\n    const userModsCompletedTotalRef = useRef(userModulesCompleted.length);\r\n\r\n    //total lesson taken in module progress bar\r\n    let userLessonsTakenRef = useRef(0);\r\n    //total lessons in the module\r\n    let totalModuleLessonsRef = useRef(0);\r\n    //percent value to display in the progress bar\r\n    let valueRef = useRef(0);\r\n\r\n\r\n\r\n\r\n    //to calculate percent value in the progress bar of each module for the user and display it on the card \r\n    //for the admin to view. It is based on the number of modules the user has taken\r\n    const valueModulePercent = ( userModule, module, index) => {\r\n\r\n        //zero based index and add one to count modules user has taken to compare with total course modules\r\n        let moduleNumber = index + 1;\r\n\r\n        //test-console.log(\"VMP func - index: \" + index + \" moduleNumber: \" + moduleNumber);\r\n\r\n        let value = 0;\r\n\r\n        let dividend = 0;\r\n\r\n        //length of the total lessons in the current module progress bar to be displayed\r\n        const divisor = module.lessonIds.length;\r\n        totalModuleLessonsRef.current = divisor;\r\n        //test-console.log(\"VMP func - totalModuleLessonsRef: \" + totalModuleLessonsRef.current);\r\n\r\n        //calculate the user value percentage else the user ran out of modules taken and set value to 0\r\n        if(moduleNumber <= userModsCompletedTotalRef.current){\r\n\r\n            dividend = (userModule[index].lessonIds.length) - 1;\r\n            //test-console.log(\"dividend: \" + dividend);\r\n\r\n            userLessonsTakenRef.current = dividend;\r\n\r\n            value = ((dividend/divisor) * 100);\r\n            //test-console.log(\"value: \" + value);\r\n            \r\n        }else{\r\n            //user hasn't completed this high of modules so this one is zero\r\n            value = 0;\r\n            userLessonsTakenRef.current = value;\r\n        }\r\n\r\n        return value;\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\nreturn(\r\n\r\n    <div className=\"usercardContainer\">\r\n        \r\n\r\n        <div className=\"usercardTitle\">\r\n            <h2>Role: <span style={{color: \"orange\"}}>{role}</span></h2>\r\n            \r\n            <h3><span style={{color: \"#20374e\"}}>Name: </span>{firstName} {middleName} {lastName}</h3>\r\n\r\n            <h3><span style={{color: \"#20374e\"}}>Email: </span>{email}</h3>\r\n        </div>\r\n\r\n\r\n        <div className=\"usercardDescription\">\r\n            <span>User Module Progress Statistics</span>\r\n        </div> \r\n\r\n\r\n\r\n        <div className=\"usercardProgressBox\">\r\n\r\n            {//Map out the course modules and display the user progress bar based on the modules taken\r\n            }\r\n            {isAuth && courseModules.map((module, index) => {\r\n\r\n                {/*test-console.log(\"userModsCompletedTotalRef: \" + userModsCompletedTotalRef.current + \" ====\") }\r\n                console.log(\"firstName: \"+ firstName + \" module: \" + (index + 1))\r\n                console.log(JSON.stringify(userModulesCompleted))\r\n                */}\r\n  \r\n\r\n                {   //set the value of the percentage without rerendering the component because no state change\r\n                    valueRef.current = valueModulePercent(userModulesCompleted, module, index)\r\n                    //test-console.log(\"valueRef.current: \" + valueRef.current);\r\n                }\r\n\r\n                return (\r\n                    <div>\r\n\r\n                        <p><span style={{color: \"orange\"}}>module {(index + 1)}: </span> {userLessonsTakenRef.current}/{totalModuleLessonsRef.current}</p>\r\n\r\n                        <progress value={ valueRef.current } max=\"100\" />   \r\n\r\n                    </div>\r\n\r\n                );})}\r\n\r\n\r\n\r\n\r\n        </div>  \r\n\r\n\r\n    </div>\r\n\r\n);\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Card;\r\n\r\n","\r\nimport './AdminUsers.css';\r\nimport { useEffect, useState } from 'react';\r\nimport { useAuth } from '../../context/AuthProvider';\r\nimport Usercard from '../usercard/Usercard';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\n/**This component is used for displaying the organizations users and their progress. It displays them in a\r\n * user card with their role, name, email and progress bars for each module in the course. It is only\r\n * accessible and displayed if the login user has the admin or instructor role\r\n */\r\n\r\nconst AdminUsers = () => {\r\n\r\n    const [isAuth, setIsAuth] = useState(false);\r\n    const [courseModules, setCourseModules] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const [organizationUsers, setOrganizationUsers] = useState([]);\r\n    const [organizationPaid, setOrganizationPaid] = useState(\"\");\r\n    const [licenseTotal, setLicenseTotal] = useState(0);\r\n    const [licenseUsers, setLicenseUsers] = useState(0);\r\n\r\n\r\n    const { userState } = useAuth();\r\n\r\n    //get the course modules and then the organizataion's users to display in the admin user's page for showing\r\n    //the statistics. A bar of each module completed will be shown along with the users information\r\n    useEffect(() => {\r\n\r\n        console.log(\"AdminUsers loaded\");\r\n\r\n        //get the course modules\r\n        getCourse();\r\n        //get the users in the organzation based on license Id code of the logined in user\r\n        getOrganizationUsers();\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    \r\n    //Get the Courses from mongodb. The general modules to be displayed on the userdashboard main section\r\n    const getCourse = async () => {\r\n\r\n        //configuration file for Axios to set a header line content type to application/json\r\n        const config = {\r\n            header: { \"Content-Type\": \"application/json\" }\r\n        }\r\n\r\n        try {\r\n\r\n            //Get all the general coursework module description from mongodb via the server\r\n            const serverData = await axios.get(\"/api/auth/coursework/course\", config);\r\n\r\n            setCourseModules(serverData.data.course);\r\n            \r\n            //test-console.log(\"The serverData: \" + JSON.stringify(serverData.data.course));\r\n            \r\n            //check to see if the user is logged in and set it. This is needed to map out the users in the JSX UI\r\n            setIsAuth(userState.loggedIn);\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.log(\"This is the ERROR: \" + error);\r\n            console.log(\"This is the error message: \" + error.response.data.message)\r\n            setErrorMessage(error.response.data.error);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    //Get the users of the organization based on the admin users email to look up the license Id number and retrieve users\r\n    const getOrganizationUsers = async () => {\r\n\r\n        const email = userState.email;\r\n\r\n        const config = {\r\n            header: {\"Content-Type\": \"application/json\"}\r\n        }\r\n\r\n        try {\r\n            //axios fetch call to get the users of the organization from the server\r\n            const organization = await axios.get(`/api/auth/userinfo/organizationusers/${email}`, config);\r\n\r\n            //test-console.log(\"AdminUsers - ORGANIZATION USERS: \" + JSON.stringify(organization.data.organizationUsers))\r\n            //test-console.log(\"AdminUsers - ORGANIZATION PAID: \" + JSON.stringify(organization.data.organization));\r\n\r\n            //set the users of the organization\r\n            setOrganizationUsers(organization.data.organizationUsers);\r\n\r\n            //set the organization's name \r\n            setOrganizationPaid(organization.data.organization[0].organizationName);\r\n            //set the total organization's licenses\r\n            setLicenseTotal(organization.data.organization[0].licenseTotal);\r\n            //set the total licenses used\r\n            setLicenseUsers(organization.data.organization[0].licenseUsed);\r\n            \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n\r\n            setErrorMessage(\"Error: \" + error);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    //The JSX is displayed IF the uses are axios fetched ELSE it will show a loading text tag\r\n    if(organizationUsers !=null)\r\n    { \r\n        return(\r\n\r\n            <div className=\"grid-layout\" >\r\n\r\n                <div className=\"topTitleContainer\">\r\n\r\n\r\n                    {//Organization Name and Licenses are displayed in a borderless table for Neatness and style\r\n                    }\r\n\r\n                    <table style={{textAlign: \"center\", }}>\r\n\r\n                        <tr >\r\n                            <td style={{padding: \"10px\"}}>\r\n                                <h1>Organization:</h1>\r\n                            </td>\r\n                            <td style={{padding: \"10px\"}}>\r\n                                <h1><span style={{color: \"black\"}}>{organizationPaid}</span></h1>\r\n                            </td>\r\n                        </tr>\r\n                        <tr style={{height: \"10px\"}}>\r\n                            <td >\r\n                                <h2><span style={{color: \"#20374e\"}}>Total Licenses: </span></h2>\r\n                            </td>\r\n                            <td >\r\n                                <h2>{licenseTotal}</h2>\r\n                            </td>\r\n                        </tr>\r\n                        <tr style={{height: \"10px\"}}>\r\n                            <td >\r\n                                <h2><span style={{color: \"#20374e\"}}>Total Used: </span></h2>\r\n                            </td>\r\n                            <td >\r\n                                <h2>{licenseUsers}</h2>\r\n                            </td>\r\n                        </tr>\r\n\r\n                    </table>\r\n                    <br/>\r\n                    \r\n                    \r\n                </div>\r\n                    \r\n\r\n\r\n\r\n                <div className=\"centerAdminContainer\">\r\n\r\n                    <br/>\r\n\r\n                    {//render the users of the organization by Usercard's that display their progress and information\r\n                    isAuth && organizationUsers.map((user) => {\r\n\r\n                        return (\r\n                            <div>\r\n\r\n                                <Usercard \r\n                                key={user._id}\r\n                                role={user.role}\r\n                                firstName={user.firstName} \r\n                                middleName={user.middleName}\r\n                                lastName={user.lastName}\r\n                                email={user.email}\r\n                                \r\n                                userModulesCompleted={user.modulesCompleted}\r\n\r\n                                courseModules={courseModules}\r\n                                />\r\n\r\n                            </div>\r\n\r\n                        );})}\r\n\r\n                    {!isAuth && <span>You are not logged in. Please log in.</span>}\r\n\r\n                    <br/> \r\n\r\n                    <span style={{color: \"red\"}}>{errorMessage}</span>\r\n                    \r\n                    {errorMessage && <span>you have an error: {errorMessage}</span>}\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>Loading.......Admin Users</h3>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default AdminUsers;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport Navbar from './components/layout/Navbar';\r\nimport Landing from './components/layout/Landing';\r\nimport Login from './components/auth/Login';\r\nimport Register from './components/auth/Register';\r\nimport Admin from './components/admin/Admin';\r\nimport ProfileBar from './components/layout/ProfileBar';\r\nimport Assessment from \"./components/assessment/Assessment\";\r\nimport AddContent from \"./components/AddContent/AddContent\";\r\nimport ContactUs from \"./components/contactus/ContactUs\";\r\nimport TrainingVideos from './components/trainingvideos/TrainingVideos';\r\nimport TrainingVideoView from './components/trainingvideoview/TrainingVideoView';\r\n\r\n\r\nimport ForgotPassword from './components/auth/ForgotPassword';\r\nimport ResetPassword from './components/auth/ResetPassword';\r\nimport Userdashboard from './components/user-dashboard/Userdashboard';\r\nimport PageNotFound from './components/PageNotFound404';\r\nimport HomeTestpage from './components/auth/HomeTestpage';\r\nimport PrivateScreen from './components/auth/PrivateScreen';\r\nimport PrivateRoute from './components/routing/PrivateRoute';\r\nimport Presentor from './components/presentor/Presentor';\r\nimport FinishedModule from './components/finishedmodule/FinishedModule';\r\nimport MyProfile from './components/myprofile/MyProfile';\r\nimport AdminUsers from './components/adminusers/AdminUsers';\r\n\r\n//$*import {GlobalProvider} from './context/GlobalState';\r\nimport {AuthProvider} from './context/AuthProvider';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { Elements } from '@stripe/react-stripe-js';\r\n\r\nconst stripePromise = loadStripe(\"pk_test_51Id8XzHvDUJI12673y4VfjLLdr8SXtTfH0jVhmojbBFpQIZzUomI2cyIX7mdoqE7l7wJEo0pw3jzDoecPt9gUpmS00AwtcFwrV\");\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n\r\n    <AuthProvider>\r\n    \r\n      <Router>\r\n        <div className='main-grid-layout'>\r\n          <ProfileBar />\r\n          <Navbar />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Landing} />\r\n            <Route exact path='/traininginfo' component={TrainingVideos} />\r\n            <Route exact path='/traininginfo/:trainingVideoId' component={TrainingVideoView} />\r\n\r\n            <Route exact path=\"/contactus\" component={ContactUs} />\r\n            <Route exact path=\"/login\" component={Login} /> \r\n            <Route exact path=\"/forgotpassword\" component={ForgotPassword} />\r\n            <Route exact path=\"/resetpassword/:resetToken\" component={ResetPassword} />\r\n            <Route exact path=\"/hometestpage\" component={HomeTestpage} /> {/**This route is used for testing can be removed */}\r\n            <Route exact path=\"/assessment\" component={Assessment} />\r\n            \r\n            <PrivateRoute exact path=\"/privatescreen\" component={PrivateScreen} redirLink='/' />\r\n            <PrivateRoute exact path=\"/userdashboard\" component={Userdashboard} />\r\n            <PrivateRoute exact path=\"/presentor\" component={Presentor} />\r\n            <PrivateRoute exact path=\"/finishedmodule\" component={FinishedModule} />\r\n            <PrivateRoute exact path=\"/myprofile\" component={MyProfile} />\r\n            <PrivateRoute exact path=\"/adminusers\" component={AdminUsers} />\r\n\r\n            <Elements stripe={ stripePromise} >\r\n              <Route exact path=\"/register\" component={Register} />\r\n            </Elements>\r\n\r\n            {/**These route is were never implemented */}\r\n            <Route exact path=\"/admin\" component={Admin} />\r\n            <Route exact path=\"/addcontent\" component={AddContent} />\r\n\r\n            <Route component={PageNotFound}/>\r\n\r\n          </Switch>\r\n          \r\n        </div>\r\n      </Router>\r\n    \r\n    </AuthProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport Login from './components/auth/Login';\r\n\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n  </div>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}